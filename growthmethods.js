
/**
 * Created by SimonChapman, eatyourpeas on 04/01/15.
 */
 ////////////////////////////////////////
 /*

PLEASE NOTE THAT THE WHO-UK DATA HERE IS LICENSED TO THE MRC AND SHOULD NOT BE USED WITHOUT THEIR SPECIFIC PERMISSION


 */

var moment = require('moment');
var duration_moment = require('moment-duration-format');
moment().format();



///this is the reference data

    bp_decimalAges = [4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5, 20.0, 20.5, 21.0, 21.5, 22.0, 22.5, 23.0, 23.5, 24.0];
    boysBPSystolicL = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5];
    boysBPSystolicM = [102.1, 102.6, 103.2, 103.7, 104.3, 104.8, 105.4, 105.9, 106.4, 106.9, 107.5, 108.0, 108.6, 109.3, 110.0, 110.8, 111.7, 112.7, 113.9, 115.2, 116.6, 118.0, 119.4, 120.8, 122.1, 123.3, 124.5, 125.5, 126.4, 127.2, 127.9, 128.5, 129.0, 129.4, 129.8, 130.1, 130.4, 130.7, 130.9, 131.2, 131.4];
    boysBPSystolicS = [0.083, 0.083, 0.083, 0.083, 0.083, 0.083, 0.083, 0.084, 0.084, 0.084, 0.084, 0.084, 0.084, 0.084, 0.084, 0.084, 0.085, 0.085, 0.085, 0.085, 0.085, 0.086, 0.086, 0.086, 0.086, 0.087, 0.087, 0.087, 0.087, 0.087, 0.087, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088];
    boysBPDiastolicL = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5];
    boysBPDiastolicM = [54.6, 54.7, 54.9, 55.0, 55.2, 55.4, 55.5, 55.7, 55.9, 56.0, 56.1, 56.2, 56.3, 56.3, 56.3, 56.3, 56.3, 56.4, 56.4, 56.4, 56.4, 56.5, 56.6, 56.8, 57.0, 57.4, 57.9, 58.6, 59.4, 60.3, 61.1, 61.9, 62.6, 63.2, 63.8, 64.4, 64.8, 65.2, 65.4, 65.6, 65.8];
    boysBPDiastolicS = [0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145, 0.145];
    girlsBPSystolicL = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    girlsBPSystolicM = [101.0, 101.7, 102.5, 103.2, 103.9, 104.7, 105.4, 106.1, 106.8, 107.5, 108.3, 109.0, 109.7, 110.4, 111.2, 111.8, 112.5, 113.2, 113.8, 114.4, 115.0, 115.5, 116.0, 116.5, 117.0, 117.5, 117.9, 118.2, 118.6, 118.9, 119.1, 119.4, 119.6, 119.8, 120.0, 120.2, 120.4, 120.6, 120.8, 121.0, 121.2];
    girlsBPSystolicS = [0.087, 0.087, 0.087, 0.087, 0.087, 0.087, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.088, 0.089, 0.089, 0.089, 0.089, 0.089, 0.089, 0.089, 0.089, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.090, 0.091, 0.091, 0.091, 0.091, 0.091, 0.091, 0.091];
    girlsBPDiastolicL = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5];
    girlsBPDiastolicM = [55.0, 55.2, 55.3, 55.5, 55.7, 55.9, 56.1, 56.3, 56.4, 56.6, 56.7, 56.8, 56.9, 57.0, 57.0, 57.0, 57.1, 57.2, 57.3, 57.4, 57.6, 57.9, 58.2, 58.7, 59.2, 59.7, 60.2, 60.7, 61.1, 61.6, 62.0, 62.4, 62.8, 63.2, 63.6, 63.9, 64.3, 64.7, 65.0, 65.4, 65.7];
    girlsBPDiastolicS = [0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140, 0.140];
    decimalAges = [-0.325804244, -0.306639288, -0.287474333, -0.268309377, -0.249144422, -0.229979466, -0.210814511, -0.191649555, -0.1724846, -0.153319644, -0.134154689, -0.114989733, -0.095824778, -0.076659822, -0.057494867, -0.038329911, -0.019164956, 0.0, 0.019164956, 0.038329911, 0.038329911, 0.057494867, 0.076659822, 0.083333333, 0.095824778, 0.114989733, 0.134154689, 0.153319644, 0.166666667, 0.1724846, 0.191649555, 0.210814511, 0.229979466, 0.249144422, 0.25, 0.333333333, 0.416666667, 0.5, 0.583333333, 0.666666667, 0.75, 0.833333333, 0.916666667, 1.0, 1.083333333, 1.166666667, 1.25, 1.333333333, 1.416666667, 1.5, 1.583333333, 1.666666667, 1.75, 1.833333333, 1.916666667, 2.0, 2.0, 2.083333333, 2.166666667, 2.25, 2.333333333, 2.416666667, 2.5, 2.583333333, 2.666666667, 2.75, 2.833333333, 2.916666667, 3.0, 3.083333333, 3.166666667, 3.25, 3.333333333, 3.416666667, 3.5, 3.583333333, 3.666666667, 3.75, 3.833333333, 3.916666667, 4.0, 4.0, 4.083, 4.167, 4.25, 4.333, 4.417, 4.5, 4.583, 4.667, 4.75, 4.833, 4.917, 5.0, 5.083, 5.167, 5.25, 5.333, 5.417, 5.5, 5.583, 5.667, 5.75, 5.833, 5.917, 6.0, 6.083, 6.167, 6.25, 6.333, 6.417, 6.5, 6.583, 6.667, 6.75, 6.833, 6.917, 7.0, 7.083, 7.167, 7.25, 7.333, 7.417, 7.5, 7.583, 7.667, 7.75, 7.833, 7.917, 8.0, 8.083, 8.167, 8.25, 8.333, 8.417, 8.5, 8.583, 8.667, 8.75, 8.833, 8.917, 9.0, 9.083, 9.167, 9.25, 9.333, 9.417, 9.5, 9.583, 9.667, 9.75, 9.833, 9.917, 10.0, 10.083, 10.167, 10.25, 10.333, 10.417, 10.5, 10.583, 10.667, 10.75, 10.833, 10.917, 11.0, 11.083, 11.167, 11.25, 11.333, 11.417, 11.5, 11.583, 11.667, 11.75, 11.833, 11.917, 12.0, 12.083, 12.167, 12.25, 12.333, 12.417, 12.5, 12.583, 12.667, 12.75, 12.833, 12.917, 13.0, 13.083, 13.167, 13.25, 13.333, 13.417, 13.5, 13.583, 13.667, 13.75, 13.833, 13.917, 14.0, 14.083, 14.167, 14.25, 14.333, 14.417, 14.5, 14.583, 14.667, 14.75, 14.833, 14.917, 15.0, 15.083, 15.167, 15.25, 15.333, 15.417, 15.5, 15.583, 15.667, 15.75, 15.833, 15.917, 16.0, 16.083, 16.167, 16.25, 16.333, 16.417, 16.5, 16.583, 16.667, 16.75, 16.833, 16.917, 17.0, 17.083, 17.167, 17.25, 17.333, 17.417, 17.5, 17.583, 17.667, 17.75, 17.833, 17.917, 18.0, 18.083, 18.167, 18.25, 18.333, 18.417, 18.5, 18.583, 18.667, 18.75, 18.833, 18.917, 19.0, 19.083, 19.167, 19.25, 19.333, 19.417, 19.5, 19.583, 19.667, 19.75, 19.833, 19.917, 20.0];
    boysHeightL = [0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0];
    boysHeightM = [0.0, 0.0, 35.42414, 36.42492, 37.42772, 38.42789, 39.43673, 40.48008, 41.57838, 42.71663, 43.87082, 45.01804, 46.1415, 47.23352, 48.28677, 49.2766, 50.16595, 50.94454, 51.64579, 52.30513, 52.3461, 53.3905, 54.3881, 54.7244, 55.3374, 56.2357, 57.0851, 57.8889, 58.4249, 58.6536, 59.3872, 60.0894, 60.7605, 61.4013, 61.4292, 63.886, 65.9026, 67.6236, 69.1645, 70.5994, 71.9687, 73.2812, 74.5388, 75.7488, 76.9186, 78.0497, 79.1458, 80.2113, 81.2487, 82.2587, 83.2418, 84.1996, 85.1348, 86.0477, 86.941, 87.8161, 87.1161, 87.972, 88.8065, 89.6197, 90.412, 91.1828, 91.9327, 92.6631, 93.3753, 94.0711, 94.7532, 95.4236, 96.0835, 96.7337, 97.3749, 98.0073, 98.631, 99.2459, 99.8515, 100.4485, 101.0374, 101.6186, 102.1933, 102.7625, 103.3273, 102.49, 103.06, 103.64, 104.22, 104.8, 105.4, 106.0, 106.6, 107.21, 107.81, 108.41, 109.01, 109.59, 110.16, 110.73, 111.28, 111.81, 112.35, 112.87, 113.38, 113.9, 114.41, 114.92, 115.43, 115.93, 116.44, 116.94, 117.44, 117.94, 118.43, 118.93, 119.42, 119.91, 120.41, 120.9, 121.4, 121.9, 122.4, 122.9, 123.4, 123.9, 124.4, 124.9, 125.4, 125.89, 126.39, 126.87, 127.36, 127.85, 128.33, 128.8, 129.27, 129.74, 130.19, 130.64, 131.09, 131.54, 131.97, 132.41, 132.84, 133.28, 133.71, 134.14, 134.57, 134.99, 135.42, 135.84, 136.26, 136.68, 137.1, 137.53, 137.96, 138.39, 138.82, 139.26, 139.69, 140.12, 140.54, 140.96, 141.37, 141.78, 142.18, 142.58, 142.98, 143.37, 143.77, 144.16, 144.55, 144.95, 145.34, 145.75, 146.16, 146.58, 147.02, 147.46, 147.91, 148.36, 148.83, 149.31, 149.81, 150.31, 150.83, 151.35, 151.89, 152.44, 153.0, 153.58, 154.17, 154.77, 155.38, 156.0, 156.63, 157.27, 157.91, 158.55, 159.2, 159.84, 160.47, 161.11, 161.74, 162.36, 162.97, 163.58, 164.17, 164.75, 165.33, 165.88, 166.43, 166.96, 167.48, 167.98, 168.47, 168.94, 169.4, 169.84, 170.26, 170.67, 171.06, 171.43, 171.79, 172.14, 172.48, 172.79, 173.1, 173.39, 173.66, 173.93, 174.18, 174.42, 174.64, 174.86, 175.06, 175.25, 175.43, 175.61, 175.77, 175.92, 176.07, 176.21, 176.33, 176.45, 176.57, 176.67, 176.76, 176.85, 176.92, 176.99, 177.04, 177.09, 177.13, 177.17, 177.2, 177.23, 177.25, 177.26, 177.27, 177.27, 177.28, 177.28, 177.28, 177.28, 177.29, 177.29, 177.29, 177.3, 177.3, 177.3, 177.3, 177.3, 177.31, 177.32, 177.33, 177.34];
    boysHeightS = [0.00000000, 0.00000000, 0.08132453, 0.07862004, 0.07590725, 0.07314432, 0.07025966, 0.06722238, 0.06404407, 0.06080197, 0.05758883, 0.05449291, 0.05158876, 0.04895293, 0.04664170, 0.04469878, 0.04315059, 0.04197628, 0.04100319, 0.03994391, 0.03652000, 0.03609000, 0.03570000, 0.03557000, 0.03534000, 0.03501000, 0.03470000, 0.03442000, 0.03424000, 0.03416000, 0.03392000, 0.03369000, 0.03348000, 0.03329000, 0.03328000, 0.03257000, 0.03204000, 0.03165000, 0.03139000, 0.03124000, 0.03117000, 0.03118000, 0.03125000, 0.03137000, 0.03154000, 0.03174000, 0.03197000, 0.03222000, 0.03250000, 0.03279000, 0.03310000, 0.03342000, 0.03376000, 0.03410000, 0.03445000, 0.03479000, 0.03507000, 0.03542000, 0.03576000, 0.03610000, 0.03642000, 0.03674000, 0.03704000, 0.03733000, 0.03761000, 0.03787000, 0.03812000, 0.03836000, 0.03858000, 0.03879000, 0.03900000, 0.03919000, 0.03937000, 0.03954000, 0.03971000, 0.03986000, 0.04002000, 0.04016000, 0.04031000, 0.04045000, 0.04059000, 0.04008000, 0.04021000, 0.04033000, 0.04045000, 0.04057000, 0.04068000, 0.04078000, 0.04089000, 0.04098000, 0.04107000, 0.04115000, 0.04123000, 0.04131000, 0.04137000, 0.04144000, 0.04149000, 0.04155000, 0.04160000, 0.04165000, 0.04170000, 0.04174000, 0.04178000, 0.04182000, 0.04186000, 0.04190000, 0.04193000, 0.04197000, 0.04200000, 0.04203000, 0.04206000, 0.04209000, 0.04212000, 0.04216000, 0.04219000, 0.04223000, 0.04227000, 0.04231000, 0.04236000, 0.04240000, 0.04245000, 0.04249000, 0.04254000, 0.04259000, 0.04263000, 0.04267000, 0.04272000, 0.04276000, 0.04280000, 0.04284000, 0.04289000, 0.04293000, 0.04297000, 0.04302000, 0.04307000, 0.04312000, 0.04318000, 0.04324000, 0.04330000, 0.04337000, 0.04344000, 0.04351000, 0.04359000, 0.04367000, 0.04376000, 0.04384000, 0.04394000, 0.04403000, 0.04413000, 0.04423000, 0.04433000, 0.04444000, 0.04456000, 0.04468000, 0.04480000, 0.04493000, 0.04506000, 0.04520000, 0.04534000, 0.04548000, 0.04562000, 0.04577000, 0.04592000, 0.04607000, 0.04623000, 0.04638000, 0.04654000, 0.04670000, 0.04687000, 0.04704000, 0.04721000, 0.04738000, 0.04755000, 0.04774000, 0.04792000, 0.04810000, 0.04829000, 0.04848000, 0.04868000, 0.04887000, 0.04906000, 0.04926000, 0.04945000, 0.04964000, 0.04983000, 0.05001000, 0.05019000, 0.05037000, 0.05053000, 0.05068000, 0.05083000, 0.05095000, 0.05107000, 0.05116000, 0.05123000, 0.05129000, 0.05132000, 0.05133000, 0.05131000, 0.05126000, 0.05120000, 0.05110000, 0.05098000, 0.05083000, 0.05065000, 0.05045000, 0.05023000, 0.04998000, 0.04971000, 0.04942000, 0.04912000, 0.04879000, 0.04846000, 0.04811000, 0.04776000, 0.04740000, 0.04703000, 0.04666000, 0.04630000, 0.04594000, 0.04558000, 0.04522000, 0.04488000, 0.04454000, 0.04421000, 0.04389000, 0.04358000, 0.04328000, 0.04300000, 0.04273000, 0.04246000, 0.04222000, 0.04198000, 0.04175000, 0.04154000, 0.04134000, 0.04114000, 0.04096000, 0.04079000, 0.04063000, 0.04047000, 0.04033000, 0.04020000, 0.04008000, 0.03997000, 0.03987000, 0.03979000, 0.03971000, 0.03964000, 0.03958000, 0.03953000, 0.03948000, 0.03945000, 0.03942000, 0.03940000, 0.03938000, 0.03937000, 0.03936000, 0.03936000, 0.03936000, 0.03936000, 0.03935000, 0.03935000, 0.03934000, 0.03934000, 0.03934000, 0.03934000, 0.03934000, 0.03933000, 0.03933000, 0.03932000, 0.03931000, 0.03930000, 0.03929000];
    boysWeightL = [1.147, 1.126, 1.104, 1.083, 1.061, 1.040, 1.018, 0.997, 0.975, 0.954, 0.932, 0.911, 0.889, 0.868, 0.846, 0.825, 0.803, 0.782, 0.760, 0.739, 0.258, 0.244, 0.233, 0.230, 0.224, 0.216, 0.208, 0.201, 0.197, 0.195, 0.189, 0.184, 0.179, 0.174, 0.174, 0.155, 0.140, 0.126, 0.113, 0.102, 0.092, 0.082, 0.073, 0.064, 0.056, 0.049, 0.041, 0.034, 0.028, 0.021, 0.015, 0.009, 0.003, -0.003, -0.008, -0.014, -0.014, -0.019, -0.024, -0.029, -0.034, -0.039, -0.043, -0.048, -0.052, -0.056, -0.061, -0.065, -0.069, -0.073, -0.077, -0.081, -0.085, -0.088, -0.092, -0.096, -0.099, -0.103, -0.106, -0.110, -0.113, -0.426, -0.437, -0.448, -0.459, -0.471, -0.482, -0.494, -0.506, -0.518, -0.530, -0.543, -0.555, -0.567, -0.579, -0.591, -0.603, -0.615, -0.627, -0.639, -0.651, -0.663, -0.675, -0.687, -0.699, -0.711, -0.723, -0.735, -0.748, -0.760, -0.772, -0.785, -0.797, -0.810, -0.823, -0.836, -0.849, -0.861, -0.874, -0.887, -0.900, -0.913, -0.925, -0.937, -0.949, -0.961, -0.972, -0.983, -0.994, -1.005, -1.015, -1.024, -1.034, -1.042, -1.051, -1.058, -1.065, -1.072, -1.078, -1.083, -1.088, -1.092, -1.095, -1.098, -1.101, -1.103, -1.104, -1.105, -1.105, -1.104, -1.103, -1.102, -1.099, -1.097, -1.093, -1.089, -1.085, -1.080, -1.074, -1.068, -1.061, -1.053, -1.045, -1.037, -1.027, -1.018, -1.007, -0.996, -0.985, -0.973, -0.960, -0.947, -0.933, -0.918, -0.903, -0.887, -0.870, -0.852, -0.834, -0.816, -0.796, -0.776, -0.755, -0.734, -0.712, -0.690, -0.668, -0.645, -0.622, -0.599, -0.575, -0.552, -0.530, -0.507, -0.485, -0.463, -0.442, -0.422, -0.403, -0.384, -0.367, -0.351, -0.336, -0.322, -0.310, -0.299, -0.289, -0.281, -0.275, -0.269, -0.266, -0.263, -0.263, -0.263, -0.265, -0.268, -0.272, -0.278, -0.284, -0.292, -0.300, -0.309, -0.319, -0.330, -0.341, -0.352, -0.364, -0.376, -0.387, -0.399, -0.411, -0.422, -0.434, -0.445, -0.456, -0.467, -0.478, -0.489, -0.500, -0.510, -0.520, -0.530, -0.539, -0.549, -0.558, -0.567, -0.575, -0.583, -0.591, -0.599, -0.606, -0.613, -0.620, -0.627, -0.633, -0.639, -0.645, -0.651, -0.656, -0.662, -0.667, -0.671, -0.676, -0.680, -0.685, -0.689, -0.693, -0.697, -0.700, -0.704, -0.708, -0.711, -0.714, -0.718];
    boysWeightM = [0.6145, 0.7142, 0.8167, 0.9244, 1.0364, 1.1577, 1.2898, 1.436, 1.605, 1.7993, 2.0156, 2.2472, 2.486, 2.7257, 2.9594, 3.1778, 3.3769, 3.5551, 3.7172, 3.8702, 3.7529, 4.0603, 4.3671, 4.4709, 4.659, 4.9303, 5.1817, 5.4149, 5.5675, 5.6319, 5.8346, 6.0242, 6.2019, 6.369, 6.3762, 7.0023, 7.5105, 7.934, 8.297, 8.6151, 8.9014, 9.1649, 9.4122, 9.6479, 9.8749, 10.0953, 10.3108, 10.5228, 10.7319, 10.9385, 11.143, 11.3462, 11.5486, 11.7504, 11.9514, 12.1515, 12.1515, 12.3502, 12.5466, 12.7401, 12.9303, 13.1169, 13.3, 13.4798, 13.6567, 13.8309, 14.0031, 14.1736, 14.3429, 14.5113, 14.6791, 14.8466, 15.014, 15.1813, 15.3486, 15.5158, 15.6828, 15.8497, 16.0163, 16.1827, 16.3489, 16.551, 16.7081, 16.8689, 17.033, 17.2011, 17.3729, 17.548, 17.7253, 17.9043, 18.086, 18.2673, 18.4507, 18.633, 18.8143, 18.9942, 19.172, 19.349, 19.5253, 19.701, 19.8767, 20.0523, 20.229, 20.4077, 20.5867, 20.767, 20.9487, 21.1303, 21.313, 21.4981, 21.6842, 21.872, 22.0621, 22.2549, 22.45, 22.6478, 22.848, 23.051, 23.2576, 23.4657, 23.676, 23.8873, 24.1001, 24.314, 24.5293, 24.7467, 24.965, 25.1849, 25.407, 25.63, 25.855, 26.0814, 26.308, 26.5363, 26.7655, 26.996, 27.2269, 27.458, 27.69, 27.922, 28.1557, 28.39, 28.6266, 28.8637, 29.103, 29.343, 29.585, 29.828, 30.074, 30.323, 30.574, 30.829, 31.0876, 31.35, 31.615, 31.883, 32.152, 32.4224, 32.6934, 32.964, 33.234, 33.5036, 33.774, 34.0437, 34.3143, 34.585, 34.8568, 35.1298, 35.405, 35.6823, 35.9633, 36.25, 36.5432, 36.8423, 37.149, 37.4638, 37.7877, 38.122, 38.4653, 38.8201, 39.185, 39.5619, 39.9494, 40.348, 40.7577, 41.1778, 41.609, 42.0509, 42.5052, 42.97, 43.4457, 43.932, 44.428, 44.9328, 45.4445, 45.963, 46.4868, 47.0153, 47.547, 48.081, 48.6173, 49.154, 49.6907, 50.2259, 50.76, 51.2915, 51.8192, 52.343, 52.8618, 53.375, 53.883, 54.385, 54.8807, 55.369, 55.851, 56.3242, 56.7897, 57.2474, 57.6966, 58.138, 58.5697, 58.9933, 59.4074, 59.8116, 60.2047, 60.588, 60.9597, 61.3195, 61.668, 62.0053, 62.3324, 62.647, 62.9519, 63.2463, 63.531, 63.806, 64.0717, 64.329, 64.5782, 64.8187, 65.051, 65.2768, 65.4933, 65.704, 65.9069, 66.1033, 66.292, 66.4765, 66.6541, 66.824, 66.9883, 67.147, 67.3, 67.448, 67.5898, 67.728, 67.8607, 67.988, 68.111, 68.2298, 68.3437, 68.454, 68.5595, 68.6613, 68.76, 68.8555, 68.9467, 69.036, 69.1223, 69.2067, 69.289, 69.3693, 69.447, 69.524];
     boysWeightS = [0.15875, 0.16249, 0.16628, 0.17007, 0.17355, 0.17663, 0.17905, 0.18056, 0.18092, 0.17980, 0.17703, 0.17262, 0.16668, 0.15938, 0.15117, 0.14258, 0.13469, 0.12851, 0.12412, 0.12085, 0.14142, 0.13807, 0.13497, 0.13395, 0.13215, 0.12960, 0.12729, 0.12520, 0.12385, 0.12330, 0.12157, 0.12001, 0.11860, 0.11732, 0.11727, 0.11316, 0.11080, 0.10958, 0.10902, 0.10882, 0.10881, 0.10891, 0.10906, 0.10925, 0.10949, 0.10976, 0.11007, 0.11041, 0.11079, 0.11119, 0.11164, 0.11211, 0.11261, 0.11314, 0.11369, 0.11426, 0.11426, 0.11485, 0.11544, 0.11604, 0.11664, 0.11723, 0.11781, 0.11839, 0.11896, 0.11953, 0.12008, 0.12062, 0.12116, 0.12168, 0.12220, 0.12271, 0.12322, 0.12373, 0.12425, 0.12478, 0.12531, 0.12586, 0.12643, 0.12700, 0.12759, 0.11649, 0.11682, 0.11717, 0.11752, 0.11788, 0.11826, 0.11864, 0.11903, 0.11942, 0.11983, 0.12025, 0.12067, 0.12110, 0.12154, 0.12198, 0.12243, 0.12289, 0.12335, 0.12383, 0.12432, 0.12482, 0.12534, 0.12587, 0.12642, 0.12699, 0.12757, 0.12816, 0.12877, 0.12939, 0.13003, 0.13068, 0.13136, 0.13205, 0.13276, 0.13349, 0.13425, 0.13502, 0.13581, 0.13662, 0.13744, 0.13827, 0.13912, 0.13998, 0.14084, 0.14171, 0.14259, 0.14346, 0.14434, 0.14522, 0.14609, 0.14696, 0.14782, 0.14868, 0.14953, 0.15038, 0.15121, 0.15204, 0.15286, 0.15366, 0.15446, 0.15525, 0.15602, 0.15677, 0.15751, 0.15824, 0.15895, 0.15963, 0.16031, 0.16096, 0.16161, 0.16224, 0.16286, 0.16347, 0.16408, 0.16469, 0.16528, 0.16588, 0.16648, 0.16707, 0.16766, 0.16825, 0.16884, 0.16943, 0.17001, 0.17060, 0.17119, 0.17176, 0.17233, 0.17289, 0.17343, 0.17397, 0.17449, 0.17500, 0.17550, 0.17599, 0.17647, 0.17692, 0.17736, 0.17778, 0.17820, 0.17860, 0.17900, 0.17938, 0.17978, 0.18017, 0.18057, 0.18095, 0.18135, 0.18173, 0.18210, 0.18245, 0.18278, 0.18307, 0.18334, 0.18359, 0.18380, 0.18397, 0.18411, 0.18421, 0.18427, 0.18428, 0.18425, 0.18415, 0.18399, 0.18376, 0.18346, 0.18309, 0.18263, 0.18209, 0.18146, 0.18075, 0.17995, 0.17908, 0.17813, 0.17710, 0.17600, 0.17482, 0.17357, 0.17226, 0.17087, 0.16944, 0.16797, 0.16645, 0.16491, 0.16336, 0.16180, 0.16025, 0.15872, 0.15722, 0.15576, 0.15434, 0.15297, 0.15166, 0.15041, 0.14922, 0.14807, 0.14699, 0.14596, 0.14498, 0.14407, 0.14320, 0.14238, 0.14161, 0.14088, 0.14020, 0.13956, 0.13896, 0.13839, 0.13786, 0.13735, 0.13688, 0.13643, 0.13601, 0.13561, 0.13523, 0.13488, 0.13453, 0.13422, 0.13392, 0.13363, 0.13335, 0.13310, 0.13284, 0.13261, 0.13239, 0.13217, 0.13197, 0.13177, 0.13158, 0.13139, 0.13122, 0.13105, 0.13088];
     boysBMIL = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4177, 0.3449, 0.2881, 0.2708, 0.2409, 0.2003, 0.1645, 0.1324, 0.1118, 0.1032, 0.0766, 0.052, 0.0291, 0.0077, 0.0068, -0.0727, -0.137, -0.1913, -0.2385, -0.2802, -0.3176, -0.3516, -0.3828, -0.4115, -0.4382, -0.463, -0.4863, -0.5082, -0.5289, -0.5484, -0.5669, -0.5846, -0.6014, -0.6174, -0.6328, -0.6473, -0.6187, -0.584, -0.5497, -0.5166, -0.485, -0.4552, -0.4274, -0.4016, -0.3782, -0.3572, -0.3388, -0.3231, -0.3101, -0.3, -0.2927, -0.2884, -0.2869, -0.2881, -0.2919, -0.2981, -0.3067, -0.3174, -0.3303, -0.3452, -0.3622, -1.291, -1.309, -1.325, -1.342, -1.359, -1.375, -1.391, -1.407, -1.422, -1.437, -1.452, -1.467, -1.481, -1.495, -1.509, -1.523, -1.536, -1.549, -1.562, -1.575, -1.587, -1.599, -1.611, -1.622, -1.634, -1.644, -1.655, -1.665, -1.675, -1.685, -1.694, -1.704, -1.713, -1.721, -1.73, -1.738, -1.745, -1.753, -1.76, -1.767, -1.774, -1.781, -1.787, -1.793, -1.798, -1.804, -1.809, -1.814, -1.818, -1.823, -1.827, -1.83, -1.834, -1.837, -1.84, -1.843, -1.846, -1.848, -1.85, -1.852, -1.854, -1.855, -1.856, -1.857, -1.858, -1.858, -1.859, -1.859, -1.859, -1.859, -1.859, -1.858, -1.857, -1.856, -1.855, -1.854, -1.853, -1.851, -1.85, -1.848, -1.846, -1.844, -1.842, -1.839, -1.837, -1.834, -1.831, -1.829, -1.826, -1.823, -1.819, -1.816, -1.813, -1.809, -1.806, -1.802, -1.799, -1.795, -1.791, -1.787, -1.783, -1.78, -1.776, -1.771, -1.767, -1.763, -1.759, -1.755, -1.75, -1.746, -1.742, -1.738, -1.733, -1.729, -1.724, -1.72, -1.715, -1.711, -1.707, -1.702, -1.697, -1.693, -1.689, -1.684, -1.68, -1.675, -1.671, -1.666, -1.661, -1.657, -1.652, -1.648, -1.643, -1.639, -1.635, -1.63, -1.626, -1.621, -1.617, -1.612, -1.608, -1.603, -1.599, -1.595, -1.59, -1.586, -1.582, -1.577, -1.573, -1.569, -1.564, -1.56, -1.556, -1.551, -1.547, -1.543, -1.538, -1.534, -1.53, -1.526, -1.521, -1.517, -1.513, -1.509, -1.505, -1.501, -1.496, -1.492, -1.488, -1.484, -1.48, -1.476, -1.472, -1.467, -1.463, -1.459, -1.455, -1.451, -1.447, -1.443, -1.439, -1.435, -1.431, -1.427, -1.423, -1.419, -1.415, -1.412, -1.408, -1.404, -1.4, -1.396, -1.392];
     boysBMIM = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.6377, 14.2241, 14.7714, 14.9441, 15.2355, 15.6107, 15.9169, 16.1698, 16.3195, 16.3787, 16.5494, 16.6882, 16.8016, 16.895, 16.8987, 17.1579, 17.2919, 17.3422, 17.3288, 17.2647, 17.1662, 17.0488, 16.9239, 16.7981, 16.6743, 16.5548, 16.4409, 16.3335, 16.2329, 16.1392, 16.0528, 15.9743, 15.9039, 15.8412, 15.7852, 15.7356, 16.0189, 15.98, 15.9414, 15.9036, 15.8667, 15.8306, 15.7953, 15.7606, 15.7267, 15.6934, 15.661, 15.6294, 15.5988, 15.5693, 15.541, 15.514, 15.4885, 15.4645, 15.442, 15.421, 15.4013, 15.3827, 15.3652, 15.3485, 15.3326, 15.752, 15.727, 15.704, 15.682, 15.662, 15.644, 15.626, 15.61, 15.595, 15.582, 15.569, 15.557, 15.547, 15.538, 15.53, 15.523, 15.517, 15.511, 15.507, 15.503, 15.5, 15.498, 15.497, 15.497, 15.498, 15.499, 15.501, 15.503, 15.507, 15.511, 15.516, 15.522, 15.529, 15.536, 15.545, 15.554, 15.564, 15.575, 15.587, 15.6, 15.614, 15.628, 15.643, 15.659, 15.675, 15.692, 15.71, 15.729, 15.748, 15.768, 15.789, 15.81, 15.833, 15.855, 15.88, 15.904, 15.929, 15.955, 15.982, 16.009, 16.037, 16.066, 16.095, 16.125, 16.155, 16.187, 16.219, 16.251, 16.284, 16.318, 16.352, 16.387, 16.423, 16.459, 16.496, 16.533, 16.57, 16.609, 16.648, 16.687, 16.727, 16.768, 16.808, 16.85, 16.892, 16.935, 16.977, 17.02, 17.065, 17.108, 17.154, 17.199, 17.244, 17.291, 17.338, 17.386, 17.433, 17.481, 17.53, 17.579, 17.629, 17.679, 17.729, 17.779, 17.83, 17.881, 17.933, 17.985, 18.037, 18.089, 18.142, 18.194, 18.247, 18.3, 18.354, 18.407, 18.46, 18.514, 18.567, 18.621, 18.675, 18.729, 18.783, 18.836, 18.89, 18.944, 18.997, 19.051, 19.104, 19.158, 19.211, 19.264, 19.317, 19.37, 19.423, 19.475, 19.528, 19.579, 19.632, 19.683, 19.735, 19.786, 19.837, 19.887, 19.938, 19.988, 20.038, 20.087, 20.137, 20.186, 20.234, 20.282, 20.33, 20.378, 20.425, 20.472, 20.519, 20.565, 20.611, 20.656, 20.702, 20.746, 20.791, 20.836, 20.879, 20.923, 20.967, 21.009, 21.052, 21.095, 21.136, 21.178, 21.22, 21.26, 21.301, 21.342, 21.382, 21.422, 21.461, 21.501, 21.54, 21.578, 21.617, 21.655, 21.693, 21.73, 21.768, 21.805, 21.842, 21.878, 21.914, 21.951, 21.986];
     boysBMIS = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.09454, 0.0923, 0.09072, 0.09027, 0.08953, 0.08859, 0.08782, 0.08717, 0.08677, 0.08661, 0.08612, 0.08569, 0.08531, 0.08496, 0.08495, 0.08378, 0.08296, 0.08234, 0.08183, 0.0814, 0.08102, 0.08068, 0.08037, 0.08009, 0.07982, 0.07958, 0.07935, 0.07913, 0.07892, 0.07873, 0.07854, 0.07836, 0.07818, 0.07802, 0.07786, 0.07771, 0.07785, 0.07792, 0.078, 0.07808, 0.07818, 0.07829, 0.07841, 0.07854, 0.07867, 0.07882, 0.07897, 0.07914, 0.07931, 0.0795, 0.07969, 0.0799, 0.08012, 0.08036, 0.08061, 0.08087, 0.08115, 0.08144, 0.08174, 0.08205, 0.08238, 0.07684, 0.07687, 0.07692, 0.077, 0.07709, 0.0772, 0.07733, 0.07748, 0.07765, 0.07784, 0.07806, 0.07829, 0.07856, 0.07884, 0.07915, 0.07948, 0.07983, 0.0802, 0.08059, 0.081, 0.08143, 0.08189, 0.08235, 0.08284, 0.08334, 0.08386, 0.08439, 0.08494, 0.08549, 0.08606, 0.08663, 0.08722, 0.08781, 0.08841, 0.08901, 0.08962, 0.09023, 0.09084, 0.09145, 0.09207, 0.09268, 0.0933, 0.09391, 0.09451, 0.09512, 0.09572, 0.09632, 0.09691, 0.09749, 0.09807, 0.09864, 0.0992, 0.09976, 0.1003, 0.10084, 0.10137, 0.10189, 0.1024, 0.1029, 0.1034, 0.10388, 0.10435, 0.10482, 0.10527, 0.10571, 0.10615, 0.10657, 0.10698, 0.10738, 0.10777, 0.10815, 0.10852, 0.10888, 0.10923, 0.10957, 0.1099, 0.11022, 0.11054, 0.11084, 0.11114, 0.11143, 0.1117, 0.11197, 0.11223, 0.11249, 0.11273, 0.11296, 0.11319, 0.11341, 0.11362, 0.11382, 0.11402, 0.1142, 0.11438, 0.11456, 0.11472, 0.11488, 0.11503, 0.11517, 0.11532, 0.11545, 0.11558, 0.1157, 0.11581, 0.11592, 0.11603, 0.11613, 0.11622, 0.11631, 0.11639, 0.11647, 0.11655, 0.11662, 0.11668, 0.11674, 0.1168, 0.11685, 0.1169, 0.11695, 0.11699, 0.11703, 0.11706, 0.1171, 0.11712, 0.11715, 0.11717, 0.11719, 0.11721, 0.11722, 0.11723, 0.11724, 0.11724, 0.11725, 0.11725, 0.11725, 0.11724, 0.11724, 0.11723, 0.11722, 0.11721, 0.11719, 0.11718, 0.11716, 0.11714, 0.11712, 0.1171, 0.11708, 0.11706, 0.11703, 0.117, 0.11698, 0.11695, 0.11692, 0.11689, 0.11686, 0.11683, 0.1168, 0.11677, 0.11674, 0.1167, 0.11667, 0.11663, 0.1166, 0.11657, 0.11653, 0.11649, 0.11646, 0.11642, 0.11639, 0.11635, 0.11631, 0.11628, 0.11624, 0.1162, 0.11617, 0.11613, 0.11609, 0.11605, 0.11602, 0.11598, 0.11594, 0.11591, 0.11587, 0.11583, 0.1158, 0.11576, 0.11572, 0.11569, 0.11565, 0.11561, 0.11558, 0.11554, 0.11551];
     girlsHeightL = [0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0];
     girlsHeightM = [0.00000000, 0.00000000, 34.59544000, 35.59771000, 36.60905000, 37.65832000, 38.76987000, 39.94117000, 41.14154000, 42.34725000, 43.53800000, 44.69314000, 45.79079000, 46.81071000, 47.73972000, 48.57771000, 49.33962000, 50.01719000, 50.62523000, 51.20649000, 51.51200000, 52.46950000, 53.38090000, 53.68720000, 54.24540000, 55.06420000, 55.84060000, 56.57670000, 57.06730000, 57.27610000, 57.94360000, 58.58160000, 59.19220000, 59.77730000, 59.80290000, 62.08990000, 64.03010000, 65.73110000, 67.28730000, 68.74980000, 70.14350000, 71.48180000, 72.77100000, 74.01500000, 75.21760000, 76.38170000, 77.50990000, 78.60550000, 79.67100000, 80.70790000, 81.71820000, 82.70360000, 83.66540000, 84.60400000, 85.52020000, 86.41530000, 85.71530000, 86.59040000, 87.44620000, 88.28300000, 89.10040000, 89.89910000, 90.67970000, 91.44300000, 92.19060000, 92.92390000, 93.64440000, 94.35330000, 95.05150000, 95.73990000, 96.41870000, 97.08850000, 97.74930000, 98.40150000, 99.04480000, 99.67950000, 100.30580000, 100.92380000, 101.53370000, 102.13600000, 102.73120000, 101.54000000, 102.12000000, 102.71000000, 103.31000000, 103.91000000, 104.53000000, 105.15000000, 105.77000000, 106.40000000, 107.02000000, 107.64000000, 108.26000000, 108.86000000, 109.45000000, 110.03000000, 110.60000000, 111.16000000, 111.71000000, 112.24000000, 112.77000000, 113.29000000, 113.81000000, 114.32000000, 114.82000000, 115.33000000, 115.83000000, 116.33000000, 116.82000000, 117.31000000, 117.81000000, 118.30000000, 118.79000000, 119.28000000, 119.77000000, 120.26000000, 120.77000000, 121.27000000, 121.77000000, 122.28000000, 122.79000000, 123.31000000, 123.82000000, 124.33000000, 124.84000000, 125.34000000, 125.85000000, 126.35000000, 126.85000000, 127.34000000, 127.82000000, 128.30000000, 128.76000000, 129.23000000, 129.69000000, 130.14000000, 130.59000000, 131.03000000, 131.48000000, 131.92000000, 132.37000000, 132.82000000, 133.27000000, 133.73000000, 134.19000000, 134.65000000, 135.12000000, 135.59000000, 136.06000000, 136.53000000, 137.00000000, 137.48000000, 137.95000000, 138.43000000, 138.90000000, 139.38000000, 139.86000000, 140.33000000, 140.81000000, 141.28000000, 141.76000000, 142.23000000, 142.71000000, 143.18000000, 143.65000000, 144.12000000, 144.59000000, 145.06000000, 145.53000000, 146.00000000, 146.47000000, 146.93000000, 147.40000000, 147.87000000, 148.34000000, 148.82000000, 149.28000000, 149.76000000, 150.24000000, 150.71000000, 151.18000000, 151.66000000, 152.13000000, 152.60000000, 153.06000000, 153.52000000, 153.96000000, 154.41000000, 154.85000000, 155.28000000, 155.70000000, 156.11000000, 156.52000000, 156.91000000, 157.28000000, 157.65000000, 158.00000000, 158.35000000, 158.69000000, 159.01000000, 159.31000000, 159.61000000, 159.89000000, 160.16000000, 160.42000000, 160.67000000, 160.90000000, 161.12000000, 161.32000000, 161.52000000, 161.71000000, 161.88000000, 162.03000000, 162.18000000, 162.32000000, 162.44000000, 162.56000000, 162.66000000, 162.76000000, 162.85000000, 162.92000000, 163.00000000, 163.06000000, 163.12000000, 163.18000000, 163.22000000, 163.27000000, 163.30000000, 163.34000000, 163.37000000, 163.40000000, 163.42000000, 163.45000000, 163.46000000, 163.48000000, 163.49000000, 163.50000000, 163.51000000, 163.51000000, 163.52000000, 163.52000000, 163.52000000, 163.52000000, 163.53000000, 163.53000000, 163.54000000, 163.55000000, 163.56000000, 163.57000000, 163.57000000, 163.58000000, 163.59000000, 163.60000000, 163.60000000, 163.61000000, 163.61000000, 163.62000000, 163.62000000, 163.62000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.63000000, 163.64000000, 163.64000000, 163.64000000];
     girlsHeightS = [0.00000000, 0.00000000, 0.08086044, 0.07735533, 0.07386597, 0.07042367, 0.06701891, 0.06362674, 0.06025431, 0.05693870, 0.05372271, 0.05064634, 0.04773628, 0.04500635, 0.04248754, 0.04026448, 0.03839778, 0.03696740, 0.03608866, 0.03570984, 0.03694000, 0.03669000, 0.03647000, 0.03640000, 0.03627000, 0.03609000, 0.03593000, 0.03578000, 0.03568000, 0.03564000, 0.03552000, 0.03540000, 0.03530000, 0.03520000, 0.03520000, 0.03486000, 0.03463000, 0.03448000, 0.03441000, 0.03440000, 0.03444000, 0.03452000, 0.03464000, 0.03479000, 0.03496000, 0.03514000, 0.03534000, 0.03555000, 0.03576000, 0.03598000, 0.03620000, 0.03643000, 0.03666000, 0.03688000, 0.03711000, 0.03734000, 0.03764000, 0.03786000, 0.03808000, 0.03830000, 0.03851000, 0.03872000, 0.03893000, 0.03913000, 0.03933000, 0.03952000, 0.03971000, 0.03989000, 0.04006000, 0.04024000, 0.04041000, 0.04057000, 0.04073000, 0.04089000, 0.04105000, 0.04120000, 0.04135000, 0.04150000, 0.04164000, 0.04179000, 0.04193000, 0.03967000, 0.03979000, 0.03992000, 0.04004000, 0.04016000, 0.04028000, 0.04041000, 0.04053000, 0.04065000, 0.04077000, 0.04088000, 0.04099000, 0.04110000, 0.04120000, 0.04130000, 0.04140000, 0.04149000, 0.04157000, 0.04165000, 0.04173000, 0.04180000, 0.04187000, 0.04194000, 0.04200000, 0.04206000, 0.04212000, 0.04217000, 0.04222000, 0.04227000, 0.04232000, 0.04237000, 0.04241000, 0.04246000, 0.04250000, 0.04254000, 0.04258000, 0.04261000, 0.04265000, 0.04268000, 0.04271000, 0.04273000, 0.04276000, 0.04278000, 0.04281000, 0.04284000, 0.04287000, 0.04290000, 0.04293000, 0.04298000, 0.04302000, 0.04308000, 0.04314000, 0.04321000, 0.04328000, 0.04336000, 0.04345000, 0.04354000, 0.04364000, 0.04375000, 0.04387000, 0.04399000, 0.04412000, 0.04426000, 0.04440000, 0.04455000, 0.04471000, 0.04487000, 0.04504000, 0.04521000, 0.04538000, 0.04556000, 0.04574000, 0.04593000, 0.04612000, 0.04630000, 0.04649000, 0.04667000, 0.04685000, 0.04702000, 0.04719000, 0.04734000, 0.04749000, 0.04762000, 0.04774000, 0.04785000, 0.04793000, 0.04800000, 0.04805000, 0.04808000, 0.04809000, 0.04808000, 0.04805000, 0.04799000, 0.04792000, 0.04782000, 0.04770000, 0.04755000, 0.04739000, 0.04721000, 0.04701000, 0.04680000, 0.04657000, 0.04632000, 0.04606000, 0.04579000, 0.04551000, 0.04522000, 0.04492000, 0.04462000, 0.04431000, 0.04400000, 0.04369000, 0.04338000, 0.04307000, 0.04276000, 0.04245000, 0.04215000, 0.04185000, 0.04156000, 0.04127000, 0.04100000, 0.04073000, 0.04046000, 0.04021000, 0.03997000, 0.03974000, 0.03952000, 0.03931000, 0.03910000, 0.03892000, 0.03874000, 0.03858000, 0.03842000, 0.03828000, 0.03815000, 0.03803000, 0.03792000, 0.03782000, 0.03772000, 0.03764000, 0.03756000, 0.03749000, 0.03743000, 0.03737000, 0.03732000, 0.03728000, 0.03723000, 0.03720000, 0.03716000, 0.03713000, 0.03711000, 0.03708000, 0.03707000, 0.03705000, 0.03704000, 0.03703000, 0.03702000, 0.03701000, 0.03701000, 0.03701000, 0.03701000, 0.03700000, 0.03700000, 0.03699000, 0.03699000, 0.03698000, 0.03697000, 0.03696000, 0.03695000, 0.03695000, 0.03694000, 0.03693000, 0.03693000, 0.03692000, 0.03692000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03691000, 0.03690000, 0.03690000, 0.03690000, 0.03690000, 0.03690000, 0.03690000, 0.03690000];
     girlsWeightL = [1.3260, 1.2780, 1.2290, 1.1810, 1.1320, 1.0840, 1.0350, 0.9870, 0.9380, 0.8900, 0.8410, 0.7930, 0.7440, 0.6950, 0.6470, 0.5980, 0.5500, 0.5010, 0.4530, 0.4040, 0.2304, 0.2024, 0.1789, 0.1714, 0.1582, 0.1395, 0.1224, 0.1065, 0.0962, 0.0918, 0.0779, 0.0648, 0.0525, 0.0407, 0.0402, -0.0050, -0.0430, -0.0756, -0.1039, -0.1288, -0.1507, -0.1700, -0.1872, -0.2024, -0.2158, -0.2278, -0.2384, -0.2478, -0.2562, -0.2637, -0.2703, -0.2762, -0.2815, -0.2862, -0.2903, -0.2941, -0.2941, -0.2975, -0.3005, -0.3032, -0.3057, -0.3080, -0.3101, -0.3120, -0.3138, -0.3155, -0.3171, -0.3186, -0.3201, -0.3216, -0.3230, -0.3243, -0.3257, -0.3270, -0.3283, -0.3296, -0.3309, -0.3322, -0.3335, -0.3348, -0.3361, -0.5160, -0.5240, -0.5320, -0.5390, -0.5470, -0.5550, -0.5630, -0.5700, -0.5780, -0.5850, -0.5920, -0.6000, -0.6070, -0.6140, -0.6210, -0.6270, -0.6340, -0.6400, -0.6470, -0.6530, -0.6590, -0.6650, -0.6720, -0.6780, -0.6840, -0.6890, -0.6950, -0.7010, -0.7070, -0.7120, -0.7180, -0.7230, -0.7290, -0.7340, -0.7390, -0.7440, -0.7490, -0.7540, -0.7580, -0.7620, -0.7660, -0.7700, -0.7740, -0.7770, -0.7800, -0.7830, -0.7850, -0.7870, -0.7890, -0.7900, -0.7920, -0.7920, -0.7930, -0.7930, -0.7930, -0.7930, -0.7920, -0.7910, -0.7890, -0.7870, -0.7850, -0.7820, -0.7790, -0.7760, -0.7720, -0.7680, -0.7640, -0.7580, -0.7530, -0.7470, -0.7400, -0.7330, -0.7250, -0.7170, -0.7080, -0.6990, -0.6900, -0.6800, -0.6690, -0.6580, -0.6470, -0.6350, -0.6230, -0.6100, -0.5970, -0.5840, -0.5700, -0.5560, -0.5410, -0.5260, -0.5110, -0.4960, -0.4800, -0.4650, -0.4490, -0.4340, -0.4180, -0.4030, -0.3880, -0.3740, -0.3600, -0.3470, -0.3350, -0.3240, -0.3130, -0.3040, -0.2950, -0.2880, -0.2810, -0.2760, -0.2710, -0.2680, -0.2660, -0.2650, -0.2650, -0.2660, -0.2670, -0.2700, -0.2740, -0.2780, -0.2840, -0.2890, -0.2960, -0.3030, -0.3100, -0.3180, -0.3260, -0.3350, -0.3430, -0.3520, -0.3610, -0.3690, -0.3780, -0.3860, -0.3950, -0.4030, -0.4120, -0.4200, -0.4280, -0.4360, -0.4430, -0.4510, -0.4580, -0.4650, -0.4720, -0.4790, -0.4850, -0.4910, -0.4970, -0.5030, -0.5080, -0.5130, -0.5180, -0.5230, -0.5280, -0.5320, -0.5360, -0.5400, -0.5440, -0.5470, -0.5510, -0.5540, -0.5570, -0.5600, -0.5630, -0.5650, -0.5680, -0.5700, -0.5720, -0.5740, -0.5760, -0.5780, -0.5800, -0.5820, -0.5830, -0.5850, -0.5860, -0.5880, -0.5890, -0.5900, -0.5910, -0.5930, -0.5940, -0.5950, -0.5950, -0.5960, -0.5970, -0.5980, -0.5990, -0.5990, -0.6000, -0.6000, -0.6010];
     girlsWeightM = [0.5589, 0.6584, 0.7611, 0.8672, 0.9775, 1.0929, 1.2166, 1.3593, 1.525, 1.7118, 1.9163, 2.1342, 2.3607, 2.5903, 2.8164, 3.0334, 3.2362, 3.413, 3.5539, 3.6743, 3.5693, 3.8352, 4.0987, 4.1873, 4.3476, 4.5793, 4.795, 4.9959, 5.1282, 5.1842, 5.3618, 5.5295, 5.6883, 5.8393, 5.8458, 6.4237, 6.8985, 7.297, 7.6422, 7.9487, 8.2254, 8.48, 8.7192, 8.9481, 9.1699, 9.387, 9.6008, 9.8124, 10.0226, 10.2315, 10.4393, 10.6464, 10.8534, 11.0608, 11.2688, 11.4775, 11.4775, 11.6864, 11.8947, 12.1015, 12.3059, 12.5073, 12.7055, 12.9006, 13.093, 13.2837, 13.4731, 13.6618, 13.8503, 14.0385, 14.2265, 14.414, 14.601, 14.7873, 14.9727, 15.1573, 15.341, 15.524, 15.7064, 15.8882, 16.0697, 16.198, 16.3661, 16.5359, 16.706, 16.8781, 17.0519, 17.227, 17.4041, 17.5819, 17.761, 17.9401, 18.1198, 18.299, 18.4791, 18.6581, 18.837, 19.017, 19.1967, 19.377, 19.5581, 19.7404, 19.925, 20.11, 20.2972, 20.486, 20.6778, 20.871, 21.066, 21.2629, 21.4633, 21.667, 21.8742, 22.086, 22.302, 22.5234, 22.749, 22.98, 23.2141, 23.4517, 23.691, 23.933, 24.1756, 24.419, 24.6625, 24.907, 25.153, 25.398, 25.6434, 25.889, 26.1335, 26.378, 26.622, 26.8659, 27.1105, 27.355, 27.6011, 27.85, 28.101, 28.3567, 28.6159, 28.88, 29.1481, 29.4203, 29.697, 29.9771, 30.2597, 30.545, 30.8335, 31.1243, 31.417, 31.7122, 32.0096, 32.308, 32.6075, 32.9083, 33.212, 33.5147, 33.8213, 34.129, 34.4393, 34.7518, 35.068, 35.3845, 35.7048, 36.03, 36.3582, 36.6911, 37.029, 37.3731, 37.7197, 38.074, 38.4331, 38.7977, 39.168, 39.5443, 39.9272, 40.316, 40.7118, 41.1136, 41.5218, 41.9359, 42.3549, 42.7779, 43.2045, 43.6328, 44.0635, 44.4952, 44.9259, 45.3568, 45.7863, 46.2121, 46.6333, 47.0457, 47.4516, 47.8494, 48.2413, 48.6218, 48.993, 49.3568, 49.7081, 50.052, 50.3846, 50.7117, 51.024, 51.3267, 51.621, 51.903, 52.176, 52.4404, 52.693, 52.9367, 53.1707, 53.3947, 53.6118, 53.8203, 54.022, 54.2157, 54.4033, 54.5842, 54.7587, 54.9271, 55.0889, 55.244, 55.3943, 55.538, 55.6765, 55.8086, 55.9355, 56.0561, 56.1713, 56.2816, 56.3863, 56.4854, 56.581, 56.6713, 56.7567, 56.838, 56.9163, 56.9892, 57.059, 57.1247, 57.1875, 57.2469, 57.3041, 57.357, 57.407, 57.4557, 57.5008, 57.544, 57.5847, 57.6235, 57.66, 57.6953, 57.7288, 57.76, 57.7904, 57.8199, 57.847, 57.8728, 57.897, 57.92, 57.9421, 57.9627, 57.982, 58.0002, 58.0164, 58.032, 58.0464, 58.0597, 58.072, 58.0833, 58.0936, 58.104];
     girlsWeightS = [0.17378, 0.17716, 0.18066, 0.18429, 0.18779, 0.19058, 0.19209, 0.19212, 0.19052, 0.1873, 0.18261, 0.17659, 0.1694, 0.16107, 0.15165, 0.14174, 0.13249, 0.12481, 0.11855, 0.11308, 0.14339, 0.1406, 0.13805, 0.13724, 0.13583, 0.13392, 0.13228, 0.13087, 0.13, 0.12966, 0.12861, 0.1277, 0.12691, 0.12622, 0.12619, 0.12402, 0.12274, 0.12204, 0.12178, 0.12181, 0.12199, 0.12223, 0.12247, 0.12268, 0.12283, 0.12294, 0.12299, 0.12303, 0.12306, 0.12309, 0.12315, 0.12323, 0.12335, 0.1235, 0.12369, 0.1239, 0.1239, 0.12414, 0.12441, 0.12472, 0.12506, 0.12545, 0.12587, 0.12633, 0.12683, 0.12737, 0.12794, 0.12855, 0.12919, 0.12988, 0.13059, 0.13135, 0.13213, 0.13293, 0.13376, 0.1346, 0.13545, 0.1363, 0.13716, 0.138, 0.13884, 0.1244, 0.12512, 0.12584, 0.12657, 0.12731, 0.12806, 0.12881, 0.12957, 0.13033, 0.1311, 0.13186, 0.13264, 0.1334, 0.13416, 0.13493, 0.13569, 0.13643, 0.13719, 0.13794, 0.13868, 0.13942, 0.14016, 0.1409, 0.14165, 0.14239, 0.14315, 0.14391, 0.14468, 0.14547, 0.14626, 0.14706, 0.14788, 0.14872, 0.14958, 0.15045, 0.15134, 0.15225, 0.15317, 0.15409, 0.155, 0.15591, 0.15682, 0.15772, 0.1586, 0.15947, 0.16033, 0.16117, 0.16201, 0.16282, 0.16363, 0.16443, 0.16521, 0.16599, 0.16677, 0.16754, 0.16832, 0.16909, 0.16987, 0.17064, 0.17141, 0.17218, 0.17294, 0.17369, 0.17445, 0.1752, 0.17594, 0.17668, 0.17742, 0.17816, 0.17891, 0.17967, 0.18044, 0.18122, 0.18201, 0.1828, 0.18359, 0.18437, 0.18514, 0.18588, 0.1866, 0.18729, 0.18794, 0.18855, 0.18911, 0.18961, 0.19004, 0.1904, 0.19066, 0.19082, 0.19089, 0.19084, 0.19067, 0.19039, 0.19, 0.1895, 0.18891, 0.18821, 0.18743, 0.18656, 0.18563, 0.18462, 0.18355, 0.18243, 0.18128, 0.18009, 0.17887, 0.17764, 0.17641, 0.17518, 0.17395, 0.17275, 0.17156, 0.1704, 0.16924, 0.16809, 0.16693, 0.16579, 0.16465, 0.1635, 0.16237, 0.16124, 0.16014, 0.15904, 0.15798, 0.15695, 0.15595, 0.15499, 0.15406, 0.15316, 0.15232, 0.15152, 0.15075, 0.15005, 0.14938, 0.14875, 0.14817, 0.14763, 0.14713, 0.14668, 0.14625, 0.14587, 0.14551, 0.14518, 0.14487, 0.14459, 0.14433, 0.14409, 0.14387, 0.14366, 0.14347, 0.1433, 0.14314, 0.14299, 0.14286, 0.14274, 0.14262, 0.14252, 0.14243, 0.14234, 0.14226, 0.14218, 0.14211, 0.14204, 0.14198, 0.14192, 0.14187, 0.14182, 0.14177, 0.14173, 0.14168, 0.14165, 0.14161, 0.14157, 0.14154, 0.14151, 0.14148, 0.14145, 0.14142, 0.1414, 0.14137, 0.14135, 0.14133, 0.14131, 0.14129, 0.14127, 0.14126, 0.14124, 0.14123, 0.14122, 0.1412, 0.14119, 0.14118, 0.14117];
     girlsBMIL = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.5082, 0.4263, 0.3637, 0.3448, 0.3124, 0.2688, 0.2306, 0.1966, 0.1749, 0.1658, 0.1377, 0.1118, 0.0877, 0.0652, 0.0643, -0.0191, -0.0864, -0.1429, -0.1916, -0.2344, -0.2725, -0.3068, -0.3381, -0.3667, -0.3932, -0.4177, -0.4407, -0.4623, -0.4825, -0.5017, -0.5199, -0.5372, -0.5537, -0.5695, -0.5846, -0.5989, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -0.5684, -1.151, -1.157, -1.163, -1.169, -1.175, -1.181, -1.187, -1.193, -1.198, -1.204, -1.209, -1.215, -1.22, -1.225, -1.231, -1.236, -1.241, -1.245, -1.25, -1.255, -1.26, -1.264, -1.269, -1.273, -1.277, -1.281, -1.286, -1.289, -1.293, -1.297, -1.301, -1.304, -1.308, -1.311, -1.314, -1.317, -1.32, -1.323, -1.325, -1.328, -1.33, -1.332, -1.334, -1.336, -1.338, -1.339, -1.341, -1.342, -1.344, -1.345, -1.345, -1.346, -1.347, -1.347, -1.348, -1.348, -1.348, -1.349, -1.349, -1.348, -1.348, -1.348, -1.347, -1.347, -1.346, -1.346, -1.345, -1.344, -1.343, -1.342, -1.341, -1.34, -1.339, -1.338, -1.337, -1.336, -1.334, -1.333, -1.332, -1.33, -1.329, -1.327, -1.326, -1.324, -1.322, -1.321, -1.319, -1.318, -1.316, -1.314, -1.312, -1.311, -1.309, -1.307, -1.306, -1.304, -1.302, -1.3, -1.299, -1.297, -1.295, -1.293, -1.291, -1.29, -1.288, -1.286, -1.284, -1.283, -1.281, -1.279, -1.277, -1.276, -1.274, -1.272, -1.271, -1.269, -1.267, -1.266, -1.264, -1.262, -1.261, -1.259, -1.258, -1.256, -1.254, -1.253, -1.251, -1.25, -1.248, -1.247, -1.245, -1.244, -1.242, -1.241, -1.239, -1.238, -1.236, -1.235, -1.233, -1.232, -1.231, -1.229, -1.228, -1.226, -1.225, -1.224, -1.222, -1.221, -1.22, -1.218, -1.217, -1.216, -1.214, -1.213, -1.212, -1.21, -1.209, -1.208, -1.206, -1.205, -1.204, -1.203, -1.201, -1.2, -1.199, -1.197, -1.196, -1.195, -1.194, -1.193, -1.191, -1.19, -1.189, -1.188, -1.186, -1.185, -1.184, -1.183, -1.181, -1.18, -1.179, -1.178, -1.177, -1.175, -1.174, -1.173, -1.172, -1.171, -1.169, -1.168, -1.167, -1.166, -1.165];
     girlsBMIM = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 13.4501, 13.9505, 14.4208, 14.5679, 14.8157, 15.138, 15.4063, 15.6311, 15.7679, 15.8232, 15.9874, 16.1277, 16.2485, 16.3531, 16.3574, 16.6703, 16.8386, 16.9083, 16.902, 16.8404, 16.7406, 16.6184, 16.4875, 16.3568, 16.2311, 16.1128, 16.0028, 15.9017, 15.8096, 15.7263, 15.6517, 15.5855, 15.5278, 15.4787, 15.438, 15.4052, 15.6881, 15.659, 15.6308, 15.6037, 15.5777, 15.5523, 15.5276, 15.5034, 15.4798, 15.4572, 15.4356, 15.4155, 15.3968, 15.3796, 15.3638, 15.3493, 15.3358, 15.3233, 15.3116, 15.3007, 15.2905, 15.2814, 15.2732, 15.2661, 15.2602, 15.656, 15.639, 15.622, 15.605, 15.589, 15.573, 15.557, 15.542, 15.528, 15.515, 15.503, 15.492, 15.483, 15.475, 15.468, 15.463, 15.46, 15.457, 15.457, 15.458, 15.461, 15.465, 15.47, 15.477, 15.485, 15.494, 15.506, 15.517, 15.53, 15.544, 15.56, 15.577, 15.596, 15.614, 15.635, 15.656, 15.677, 15.7, 15.723, 15.748, 15.772, 15.798, 15.824, 15.85, 15.877, 15.905, 15.934, 15.963, 15.993, 16.022, 16.054, 16.085, 16.118, 16.15, 16.184, 16.218, 16.253, 16.288, 16.324, 16.361, 16.399, 16.437, 16.475, 16.515, 16.555, 16.596, 16.637, 16.679, 16.722, 16.765, 16.809, 16.853, 16.898, 16.943, 16.99, 17.036, 17.083, 17.131, 17.179, 17.227, 17.277, 17.327, 17.377, 17.427, 17.478, 17.53, 17.581, 17.634, 17.687, 17.739, 17.793, 17.846, 17.9, 17.954, 18.008, 18.062, 18.117, 18.172, 18.227, 18.281, 18.337, 18.391, 18.446, 18.5, 18.555, 18.61, 18.664, 18.718, 18.772, 18.825, 18.88, 18.932, 18.985, 19.038, 19.09, 19.142, 19.194, 19.244, 19.295, 19.345, 19.395, 19.445, 19.493, 19.542, 19.589, 19.637, 19.684, 19.73, 19.776, 19.822, 19.866, 19.911, 19.955, 19.998, 20.041, 20.083, 20.124, 20.166, 20.206, 20.246, 20.285, 20.324, 20.363, 20.401, 20.438, 20.475, 20.511, 20.547, 20.582, 20.617, 20.652, 20.685, 20.718, 20.751, 20.783, 20.816, 20.847, 20.878, 20.908, 20.938, 20.968, 20.997, 21.026, 21.054, 21.082, 21.11, 21.137, 21.164, 21.19, 21.216, 21.242, 21.267, 21.293, 21.317, 21.342, 21.366, 21.39, 21.413, 21.436, 21.459, 21.482, 21.504, 21.527, 21.548, 21.57, 21.591, 21.612, 21.633, 21.653, 21.674, 21.695, 21.715, 21.735];
     girlsBMIS = [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.09741, 0.09647, 0.09577, 0.09556, 0.0952, 0.09472, 0.09431, 0.09394, 0.09371, 0.09361, 0.09332, 0.09304, 0.09279, 0.09255, 0.09254, 0.09166, 0.09096, 0.09036, 0.08984, 0.08939, 0.08898, 0.08861, 0.08828, 0.08797, 0.08768, 0.08741, 0.08716, 0.08693, 0.08671, 0.0865, 0.0863, 0.08612, 0.08594, 0.08577, 0.0856, 0.08545, 0.08454, 0.08452, 0.08449, 0.08446, 0.08444, 0.08443, 0.08444, 0.08448, 0.08455, 0.08467, 0.08484, 0.08506, 0.08535, 0.08569, 0.08609, 0.08654, 0.08704, 0.08757, 0.08813, 0.08872, 0.08931, 0.08991, 0.09051, 0.0911, 0.09168, 0.08728, 0.0877, 0.08814, 0.0886, 0.08906, 0.08954, 0.09004, 0.09054, 0.09106, 0.0916, 0.09214, 0.0927, 0.09326, 0.09384, 0.09443, 0.09503, 0.09563, 0.09624, 0.09686, 0.09749, 0.09812, 0.09875, 0.0994, 0.10004, 0.10069, 0.10135, 0.102, 0.10266, 0.10332, 0.10397, 0.10463, 0.10529, 0.10595, 0.1066, 0.10725, 0.10789, 0.10854, 0.10918, 0.10981, 0.11044, 0.11106, 0.11167, 0.11228, 0.11288, 0.11346, 0.11404, 0.11461, 0.11517, 0.11572, 0.11625, 0.11679, 0.1173, 0.1178, 0.1183, 0.11879, 0.11926, 0.11972, 0.12017, 0.1206, 0.12103, 0.12144, 0.12185, 0.12223, 0.12261, 0.12298, 0.12333, 0.12367, 0.124, 0.12432, 0.12462, 0.12492, 0.1252, 0.12547, 0.12573, 0.12598, 0.12622, 0.12644, 0.12666, 0.12687, 0.12706, 0.12725, 0.12742, 0.12759, 0.12774, 0.12789, 0.12803, 0.12816, 0.12827, 0.12838, 0.12849, 0.12858, 0.12866, 0.12875, 0.12882, 0.12888, 0.12894, 0.12899, 0.12903, 0.12907, 0.1291, 0.12913, 0.12915, 0.12917, 0.12918, 0.12918, 0.12919, 0.12919, 0.12918, 0.12917, 0.12916, 0.12914, 0.12913, 0.1291, 0.12908, 0.12905, 0.12902, 0.12899, 0.12895, 0.12892, 0.12888, 0.12884, 0.12879, 0.12875, 0.1287, 0.12866, 0.12861, 0.12856, 0.12851, 0.12846, 0.1284, 0.12835, 0.1283, 0.12824, 0.12819, 0.12813, 0.12807, 0.12802, 0.12796, 0.1279, 0.12785, 0.12779, 0.12773, 0.12768, 0.12762, 0.12757, 0.12751, 0.12745, 0.1274, 0.12734, 0.12729, 0.12723, 0.12718, 0.12712, 0.12707, 0.12702, 0.12696, 0.12691, 0.12686, 0.12681, 0.12676, 0.12671, 0.12666, 0.1266, 0.12656, 0.1265, 0.12646, 0.12641, 0.12636, 0.12631, 0.12627, 0.12622, 0.12617, 0.12613, 0.12608, 0.12604, 0.126, 0.12595, 0.12591, 0.12587, 0.12582, 0.12578, 0.12574, 0.1257, 0.12566, 0.12561, 0.12558, 0.12554, 0.1255, 0.12546, 0.12542, 0.12538, 0.12534, 0.1253];
/*
     // The Fourth Report on the Diagnosis, Evaluation, and Treatment of High Blood Pressure in Children and Adolescents,
     // PEDIATRICS Vol. 114 No. Supplement 2 August 1, 2004 pp. 555-576
     1yr50thBoys = [80, 81  83, 85, 87, 88, 89, 34, 35, 36, 37, 38, 39, 39];
     1yr90thBoys = [94, 95, 97, 99, 100, 102, 103, 49, 50, 51, 52, 53, 53, 54];
     1yr95thBoys = [98, 99, 101, 103, 104, 106, 106, 54, 54, 55, 56, 57, 58, 58];
     1yr99thBoys = [105, 106, 108, 110, 112, 113, 114, 61, 62, 63, 64, 65, 66, 66];
     2yr50thBoys = [84, 85, 87, 88, 90, 92, 92, 39, 40, 41, 42, 43, 44, 44];
     2yr90thBoys = [97, 99, 100, 102, 104, 105, 106, 54, 55, 56, 57, 58, 58, 59];
     2yr95thBoys = [101, 102, 104, 106, 108, 109, 110, 59, 59, 60, 61, 62, 63, 63];
     2yr99thBoys = [109, 110, 111, 113, 115, 117, 117, 66, 67, 68, 69, 70, 71, 71];

     3yr50thBoys = [86, 87, 89, 91, 93, 94, 95, 44, 44, 45, 46, 47, 48, 48];
     3yr90thBoys = [100, 101, 103, 105, 107, 108, 109, 59, 59, 60, 61, 62, 63, 63];
     3yr95thBoys = [104, 105, 107, 109, 110, 112, 113, 63, 63, 64, 65, 66, 67, 67];
     3yr99thBoys = [111, 112, 114, 116, 118, 119, 120, 71, 71, 72, 73, 74, 75, 75];

     4yr50thBoys = [88, 89, 91, 93, 95, 96, 97, 47, 48, 49, 50, 51, 51, 52];
     4yr90thBoys = [102, 103, 105, 107, 109, 110, 111, 62, 63, 64, 65, 66, 66, 67];
     4yr95thBoys = [106, 107, 109, 111, 112, 114, 115, 66, 67, 68, 69, 70, 71, 71];
     4yr99thBoys = [113, 114, 116, 118, 120, 121, 122, 74, 75, 76, 77, 78, 78, 79];

     5yr50thBoys = [90, 91, 93, 95, 96, 98, 98, 50, 51, 52, 53, 54, 55, 55];
     5yr90thBoys = [104, 105, 106, 108, 110, 111, 112, 65, 66, 67, 68, 69, 69, 70];
     5yr95thBoys = [108, 109, 110, 112, 114, 115, 116, 69, 70, 71, 72, 73, 74, 74];
     5yr99thBoys = [115, 116, 118, 120, 121, 123, 123, 77, 78, 79, 80, 81, 81, 82];

     6yr50thBoys = [91, 92, 94, 96, 98, 99, 100, 53, 53, 54, 55, 56, 57, 57];
     6yr90thBoys = [105, 106, 108, 110, 111, 113, 113, 68, 68, 69, 70, 71, 72, 72];
     6yr95thBoys = [109, 110, 112, 114, 115, 117, 117, 72, 72, 73, 74, 75, 76, 76];
     6yr99thBoys = [116, 117, 119, 121, 123, 124, 125, 80, 80, 81, 82, 83, 84, 84];

     7yr50thBoys = [92, 94, 95, 97, 99, 100, 101, 55, 55, 56, 57, 58, 59, 59];
     7yr90thBoys = [106, 107, 109, 111, 113, 114, 115, 70, 70, 71, 72, 73, 74, 74];
     7yr95thBoys = [110, 111, 113, 115, 117, 118, 119, 74, 74, 75, 76, 77, 78, 78];
     7yr99thBoys = [117, 118, 120, 122, 124, 125, 126, 82, 82, 83, 84, 85, 86, 86];

     8yr50thBoys = [94, 95, 97, 99, 100, 102, 102, 56, 57, 58, 59, 60, 60, 61];
     8yr90thBoys = [107, 109, 110, 112, 114, 115, 116, 71, 72, 72, 73, 74, 75, 76];
     8yr95thBoys = [111, 112, 114, 116, 118, 119, 120, 75, 76, 77, 78, 79, 79, 80];
     8yr99thBoys = [119, 120, 122, 123, 125, 127, 127, 83, 84, 85, 86, 87, 87, 88];

     9yr50thBoys = [95, 96, 98, 100, 102, 103, 104, 57, 58, 59, 60, 61, 61, 62];
     9yr90thBoys = [109, 110, 112, 114, 115, 117, 118, 72, 73, 74, 75, 76, 76, 77];
     9yr95thBoys = [113, 114, 116, 118, 119, 121, 121, 76, 77, 78, 79, 80, 81, 81];
     9yr99thBoys = [120, 121, 123, 125, 127, 128, 129, 84, 85, 86, 87, 88, 88, 89];

     10yr50thBoys = [97, 98, 100, 102, 103, 105, 106, 58, 59, 60, 61, 61, 62, 63];
     10yr90thBoys = [111, 112, 114, 115, 117, 119, 119, 73, 73, 74, 75, 76, 77, 78];
     10yr95thBoys = [115, 116, 117, 119, 121, 122, 123, 77, 78, 79, 80, 81, 81, 82];
     10yr99thBoys = [122, 123, 125, 127, 128, 130, 130, 85, 86, 86, 88, 88, 89, 90];

     11yr50thBoys = [99, 100, 102, 104, 105, 107, 107, 59, 59, 60, 61, 62, 63, 63];
     11yr90thBoys = [113, 114, 115, 117, 119, 120, 121, 74, 74, 75, 76, 77, 78, 78];
     11yr95thBoys = [117, 118, 119, 121, 123, 124, 125, 78, 78, 79, 80, 81, 82, 82];
     11yr99thBoys = [124, 125, 127, 129, 130, 132, 132, 86, 86, 87, 88, 89, 90, 90];

     12yr50thBoys = [101, 102, 104, 106, 108, 109, 110, 59, 60, 61, 62, 63, 63, 64];
     12yr90thBoys = [115, 116, 118, 120, 121, 123, 123, 74, 75, 75, 76, 77, 78, 79];
     12yr95thBoys = [119, 120, 122, 123, 125, 127, 127, 78, 79, 80, 81, 82, 82, 83];
     12yr99thBoys = [126, 127, 129, 131, 133, 134, 135, 86, 87, 88, 89, 90, 90, 91];

     13yr50thBoys = [104, 105, 106, 108, 110, 111, 112, 60, 60, 61, 62, 63, 64, 64];
     13yr90thBoys = {117, 118, 120, 122, 124, 125, 126, 75, 75, 76, 77, 78, 79, 79];
     13yr95thBoys = [121, 122, 124, 126, 128, 129, 130, 79, 79, 80, 81, 82, 83, 83];
     13yr99thBoys = [128, 130, 131, 133, 135, 136, 137, 87, 87, 88, 89, 90, 91, 91];

     14yr50thBoys = [106, 107, 109, 111, 113, 114, 115, 60, 61, 62, 63, 64, 65, 65];
     14yr90thBoys = [120, 121, 123, 125, 126, 128, 128, 75, 76, 77, 78, 79, 79, 80];
     14yr95thBoys = [124, 125, 127, 128, 130, 132, 132, 80, 80, 81, 82, 83, 84, 84];
     14yr99thBoys = [131, 132, 134, 136, 138, 139, 140, 87, 88, 89, 90, 91, 92, 92];

     15yr50thBoys = [109, 110, 112, 113, 115, 117, 117, 61, 62, 63, 64, 65, 66, 66];
     15yr90thBoys = [122, 124, 125, 127, 129, 130, 131, 76, 77, 78, 79, 80, 80, 81];
     15yr95thBoys = [126, 127, 129, 131, 133, 134, 135, 81, 81, 82, 83, 84, 85, 85];
     15yr99thBoys = [134, 135, 136, 138, 140, 142, 142, 88, 89, 90, 91, 92, 93, 93];

     16yr50thBoys = [111, 112, 114, 116, 118, 119, 120, 63, 63, 64, 65, 66, 67, 67];
     16yr90thBoys = [125, 126, 128, 130, 131, 133, 134, 78, 78, 79, 80, 81, 82, 82];
     16yr95thBoys = [129, 130, 132, 134, 135, 137, 137, 82, 83, 83, 84, 85, 86, 87];
     16yr99thBoys = [136, 137, 139, 141, 143, 144, 145, 90, 90, 91, 92, 93, 94, 94];

     17yr50thBoys = [114, 115, 116, 118, 120, 121, 122, 65, 66, 66, 67, 68, 69, 70];
     17yr90thBoys = [127, 128, 130, 132, 134, 135, 136, 80, 80, 81, 82, 83, 84, 84];
     17yr95thBoys = [131, 132, 134, 136, 138, 139, 140, 84, 85, 86, 87, 87, 88, 89];
     17yr99thBoys = [139, 140, 141, 143, 145, 146, 147, 92, 93, 93, 94, 95, 96, 97];

     /// GIRLS DATA

     1yr50thGirls = [83, 84, 85, 86, 88, 89, 90, 38, 39, 39, 40, 41, 41, 42];
     1yr90thGirls = [97, 97, 98, 100, 101, 102, 103, 52, 53, 53, 54, 55, 55, 56];
     1yr95thGirls = [100, 101, 102, 104, 105, 106, 107, 56, 57, 57, 58, 59, 59, 60];
     1yr99thGirls = [108, 108, 109, 111, 112, 113, 114, 64, 64, 65, 65, 66, 67, 67];

     2yr50thGirls = [85, 85, 87, 88, 89, 91, 91, 43, 44, 44, 45, 46, 46, 47];
      2yr90thGirls = [98, 99, 100, 101, 103, 104, 105, 57, 58, 58, 59, 60, 61, 61];
      2yr95thGirls = [102, 103, 104, 105, 107, 108, 109, 61, 62, 62, 63, 64, 65, 65];
      2yr99thGirls = [109, 110, 111, 112, 114, 115, 116, 69, 69, 70, 70, 71, 72, 72];

      3yr50thGirls = [86, 87, 88, 89, 91, 92, 93, 47, 48, 48, 49, 50, 50, 51];
      3yr90thGirls = [100, 100, 102, 103, 104, 106, 106, 61, 62, 62, 63, 64, 64, 65];
      3yr95thGirls = [104, 104, 105, 107, 108, 109, 110, 65, 66, 66, 67, 68, 68, 69];
      3yr99thGirls = [111, 111, 113, 114, 115, 116, 117, 73, 73, 74, 74, 75, 76, 76];

      4yr50thGirls = [88, 88, 90, 91, 92, 94, 94, 50, 50, 51, 52, 52, 53, 54];
      4yr90thGirls = [101, 102, 103, 104, 106, 107, 108, 64, 64, 65, 66, 67, 67, 68];
      4yr95thGirls = [105, 106, 107, 108, 110, 111, 112, 68, 68, 69, 70, 71, 71, 72];
      4yr99thGirls = [112, 113, 114, 115, 117, 118, 119, 76, 76, 76, 77, 78, 79, 79];

      5yr50thGirls = [89, 90, 91, 93, 94, 95, 96, 52, 53, 53, 54, 55, 55, 56];
      5yr90thGirls = [103, 103, 105, 106, 107, 109, 109, 66, 67, 67, 68, 69, 69, 70];
      5yr95thGirls = [107, 107, 108, 110, 111, 112, 113, 70, 71, 71, 72, 73, 73, 74];
      5yr99thGirls = [114, 114, 116, 117, 118, 120, 120, 78, 78, 79, 79, 80, 81, 81];

      6yr50thGirls = [91, 92, 93, 94, 96, 97, 98, 54, 54, 55, 56, 56, 57, 58];
      6yr90thGirls = [104, 105, 106, 108, 109, 110, 111, 68, 68, 69, 70, 70, 71, 72];
      6yr95thGirls = [108, 109, 110, 111, 113, 114, 115, 72, 72, 73, 74, 74, 75, 76];
      6yr99thGirls = [115, 116, 117, 119, 120, 121, 122, 80, 80, 80, 81, 82, 83, 83];

      7yr50thGirls = [93, 93, 95, 96, 97, 99, 99, 55, 56, 56, 57, 58, 58, 59];
      7yr90thGirls = [106, 107, 108, 109, 111, 112, 113, 69, 70, 70, 71, 72, 72, 73];
      7yr95thGirls = [110, 111, 112, 113, 115, 116, 116, 73, 74, 74, 75, 76, 76, 77];
      7yr99thGirls = [117, 118, 119, 120, 122, 123, 124, 81, 81, 82, 82, 83, 84, 84];

      8yr50thGirls = [95, 95, 96, 98, 99, 100, 101, 57, 57, 57, 58, 59, 60, 60];
      8yr90thGirls = [108, 109, 110, 111, 113, 114, 114, 71, 71, 71, 72, 73, 74, 74];
      8yr95thGirls = [112, 112, 114, 115, 116, 118, 118, 75, 75, 75, 76, 77, 78, 78];
      8yr99thGirls = [119, 120, 121, 122, 123, 125, 125, 82, 82, 83, 83, 84, 85, 86];

      9yr50thGirls = [96, 97, 98, 100, 101, 102, 103, 58, 58, 58, 59, 60, 61, 61];
      9yr90thGirls = [110, 110, 112, 113, 114, 116, 116, 72, 72, 72, 73, 74, 75, 75];
      9yr95thGirls = [114, 114, 115, 117, 118, 119, 120, 76, 76, 76, 77, 78, 79, 79];
      9yr99thGirls = [121, 121, 123, 124, 125, 127, 127, 83, 83, 84, 84, 85, 86, 87];

      10yr50thGirls = [98, 99, 100, 102, 103, 104, 105, 59, 59, 59, 60, 61, 62, 62];
      10yr90thGirls = [112, 112, 114, 115, 116, 118, 118, 73, 73, 73, 74, 75, 76, 76];
      10yr95thGirls = [116, 116, 117, 119, 120, 121, 122, 77, 77, 77, 78, 79, 80, 80];
      10yr99thGirls = [123, 123, 125, 126, 127, 129, 129, 84, 84, 85, 86, 86, 87, 88];

      11yr50thGirls = [100, 101, 102, 103, 105, 106, 107, 60, 60, 60, 61, 62, 63, 63];
      11yr90thGirls = [114, 114, 116, 117, 118, 119, 120, 74, 74, 74, 75, 76, 77, 77];
      11yr95thGirls = [118, 118, 119, 121, 122, 123, 124, 78, 78, 78, 79, 80, 81, 81];
      11yr99thGirls = [125, 125, 126, 128, 129, 130, 131, 85, 85, 86, 87, 87, 88, 89];

      12yr50thGirls = [102, 103, 104, 105, 107, 108, 109, 61, 61, 61, 62, 63, 64, 64];
      12yr90thGirls = [116, 116, 117, 119, 120, 121, 122, 75, 75, 75, 76, 77, 78, 78];
      12yr95thGirls = [119, 120, 121, 123, 124, 125, 126, 79, 79, 79, 80, 81, 82, 82];
      12yr99thGirls = [127, 127, 128, 130, 131, 132, 133, 86, 86, 87, 88, 88, 89, 90];

      13yr50thGirls = [104, 105, 106, 107, 109, 110, 110, 62, 62, 62, 63, 64, 65, 65];
      13yr90thGirls = [117, 118, 119, 121, 122, 123, 124, 76, 76, 76, 77, 78, 79, 79];
      13yr95thGirls = [121, 122, 123, 124, 126, 127, 128, 80, 80, 80, 81, 82, 83, 83];
      13yr99thGirls = [128, 129, 130, 132, 133, 134, 135, 87, 87, 88, 89, 89, 90, 91];

      14yr50thGirls = [106, 106, 107, 109, 110, 111, 112, 63, 63, 63, 64, 65, 66, 66];
      14yr90thGirls = [119, 120, 121, 122, 124, 125, 125, 77, 77, 77, 78, 79, 80, 80];
      14yr95thGirls = [123, 123, 125, 126, 127, 129, 129, 81, 81, 81, 82, 83, 84, 84];
      14yr99thGirls = [130, 131, 132, 133, 135, 136, 136, 88, 88, 89, 90, 90, 91, 92];

      15yr50thGirls = [107, 108, 109, 110, 111, 113, 113, 64, 64, 64, 65, 66, 67, 67];
      15yr90thGirls = [120, 121, 122, 123, 125, 126, 127, 78, 78, 78, 79, 80, 81, 81];
      15yr95thGirls = [124, 125, 126, 127, 129, 130, 131, 82, 82, 82, 83, 84, 85, 85];
      15yr99thGirls = [131, 132, 133, 134, 136, 137, 138, 89, 89, 90, 91, 91, 92, 93];

      16yr50thGirls = [108, 108, 110, 111, 112, 114, 114, 64, 64, 65, 66, 66, 67, 68];
      16yr90thGirls = [121, 122, 123, 124, 126, 127, 128, 78, 78, 79, 80, 81, 81, 82];
      16yr95thGirls = [125, 126, 127, 128, 130, 131, 132, 82, 82, 83, 84, 85, 85, 86];
      16yr99thGirls = [132, 133, 134, 135, 137, 138, 139, 90, 90, 90, 91, 92, 93, 93];

      17yr50thGirls = [108, 109, 110, 111, 113, 114, 115, 64, 65, 65, 66, 67, 67, 68];
      17yr90thGirls = [122, 122, 123, 125, 126, 127, 128, 78, 79, 79, 80, 81, 81, 82];
      17yr95thGirls = [125, 126, 127, 129, 130, 131, 132, 82, 83, 83, 84, 85, 85, 86];
      17yr99thGirls = [133, 133, 134, 136, 137, 138, 139, 90, 90, 91, 91, 92, 93, 93];

      heightCentiles = ["5th", "10th", "25th", "50th", "75th", "90th", "95th", "5th", "10th", "25th", "50th", "75th", "90th", "95th"];
*/


///these are the public methods

exports.decimalAgeFromDates = function(dateOfBirth, clinicDate){

    decimalAgeToReturn = 0.0;
    numberOfDays = 0;

    //check the dates are in order
    var myDoB = moment(dateOfBirth).startOf('day');
    var myClinic = moment(clinicDate).startOf('day');

    if(myDoB.isAfter(myClinic)){
        //the date of birth is after the clinic date
        return 0;
    }


    numberOfDays = myClinic.diff(myDoB, 'days');

    decimalAgeToReturn = numberOfDays/365.25;

    return decimalAgeToReturn;
}


exports.chronologicalAgeFromDates = function(dateOfBirth, clinicDate){

    //check the dates are in order
    //check the dates are in order
    var myDoB = moment(dateOfBirth).startOf('day');
    var myClinic = moment(clinicDate).startOf('day');

    if(myDoB.isAfter(myClinic)){
        //the date of birth is after the clinic date
        return "";
    }

    var numberOfDays = myClinic.diff(myDoB, 'days');

	var chronologicalAgeToReturn = moment.duration(numberOfDays, "days").format("y [years], M [months], D [days]");

    return chronologicalAgeToReturn;

}


exports.bmiFromHeightandWeight = function( height,  weight){
     bmi = weight/Math.pow(height/100, 2);
    return bmi;
}

exports.weightForBMI = function( height,  bMI){
     var returnWeight = 0.0;
    returnWeight = bMI*Math.pow(height/100, 2);
    return returnWeight;
}

exports.percentageMedianBMI = function( actualBMI,  decimalAge, isMale){
     var percentMedianBMI=0.0;

    var mArray = getMeasurementParameter("BMI", isMale, "M");
     var m = 0.0;

    ageMatched = thereIsADecimalAgeMatch(decimalAge);

    if (ageMatched){
        ageIndex = indexForMatchedDecimalAge(decimalAge);
        m = getMatchedLMorSParameter(mArray,ageIndex);
    }
    else{
        oneBelow = findAgeIndexOneBelow(decimalAge);
        if (canUseCubicInterpolation(oneBelow)){
            m = cubicInterpolation(actualBMI, decimalAge, oneBelow, mArray, decimalAges);
        }
        else {
            m = linearInterpolation(actualBMI, decimalAge, oneBelow, mArray, decimalAges);
        }
    }

    percentMedianBMI = (actualBMI/m)*100;

    return percentMedianBMI;
}

exports.SDS = function(measurement,  decimalAge,  actualMeasurement, isMale){
     z = 0.0;

     z= SDS(measurement, decimalAge, actualMeasurement, isMale);

    return z;
}

exports.convertZScoreToCentile = function ( z){
     var centile=0.0;

    centile = convertZScoreToCentile(z);

    return centile;
}

exports.bpSDS = function(isSystolic, isMale, decimaleAge, bp_measurement ){
  z = 0.0;

  //  REFERENCE DATA BEGINS AT 4 AND ENDS AT 24 - this is from the RCPCH BP data (Thalange et al.): it does not take height into account,
  // and is purely based on age and sex
  // select the LMS arrays

  var measurement = "";
  if (isSystolic) {
    measurement = "BPSystolic";
  } else {
    measurement = "BPDiastolic";
  }

  lArray = getMeasurementParameter(measurement, isMale, "L");
  mArray = getMeasurementParameter(measurement, isMale, "M");
  sArray = getMeasurementParameter(measurement, isMale, "S");

  var l, m, s = 0.0;

  var ageMatched = findBPDecimalAge(decimaleAge);

  if (ageMatched) {
    var index = indexForMatchedBPDecimalAge(decimaleAge);
    l = getMatchedLMorSParameter(lArray, index);
    m = getMatchedLMorSParameter(mArray, index);
    s = getMatchedLMorSParameter(sArray, index);
  } else {
    var oneBelow = findBPDecimalAgeIndexOneBelow(decimaleAge);

    if (canUseCubicInterpolationForBP(oneBelow)) {
      l = cubicInterpolation(bp_measurement, decimaleAge, oneBelow, lArray, bp_decimalAges);
      m = cubicInterpolation(bp_measurement, decimaleAge, oneBelow, mArray, bp_decimalAges);
      s = cubicInterpolation(bp_measurement, decimaleAge, oneBelow, sArray, bp_decimalAges);
    } else {
      l = linearInterpolation(bp_measurement, decimaleAge, oneBelow, lArray, bp_decimalAges);
      m = linearInterpolation(bp_measurement, decimaleAge, oneBelow, mArray, bp_decimalAges);
      s = linearInterpolation(bp_measurement, decimaleAge, oneBelow, sArray, bp_decimalAges);
    }
  }

   // put the l, m & s values into the equation

   z = calculateSDS(l, m, s, bp_measurement);

   return z;

}

exports.measurementFromSDS = function( measurement,  requestedMeasureSDS,  actualMeasurement,  isMale,  decimalAge, isBP ){

    var decimalAgeArrayToUse;
    if (isBP) {
      decimalAgeArrayToUse = bp_decimalAges;
    } else {
      decimalAgeArrayToUse = decimalAges;
    }

    var lms = getLMS(measurement, isMale, actualMeasurement, decimalAge, decimalAgeArrayToUse);

     var measurementValue = 0.0;

     var l, m, s;

    l = lms[0];
    m = lms[1];
    s = lms[2];


    //note 9th centile is -1.341

    if (l != 0.0){
        measurementValue = Math.pow((1+l*s*requestedMeasureSDS),1/l)*m;
    }

    else {
        measurementValue = Math.exp(s*requestedMeasureSDS)*m;
    }

    return measurementValue;


    /*
    X = M (1 + LSZ)**(1/L), L ≠ 0

        Or

    X = M exp(SZ), L = 0

     */
}

exports.BPZFromHeightSDSAndDecimalAgeAndSex = function (isSystolic, height_sds, bp_measurement, decimal_age, isMale){

    /// the regression coefficients and method is taken from
    // National High Blood Pressure Education Program Working Group on High Blood Pressure in Children and Adolescents,
    // (2004) The Fourth Report on the Diagnosis, Evaluation, and Treatment of High Blood Pressure in Children and Adolescents. Pediatrics, Vol. 114 No. Supplement 2 August 1, pp. 555-576.

    //convert child's age to an integer
    var age = Math.floor(decimal_age);

    /// Compute the expected SBP (µ) for children of same sex, age and height h inches given by equation:
    //          4                 4
    //  µ = α + Σ β[j] (y-10)^j + Σ γ[k] (Zht)^k
    //         j=1              k=1
    //____________________________________________________________________________________________________//

    // get height centile from decimal_age and height_measurement and sex (note this uses UK90 not CDC data)
  //  var Zht = SDS("height", decimal_age, height_measurement, isMale);
    var Zht = height_sds;
  //  var htCentile = convertZScoreToCentile(Zht);

    // look up alpha, beta[1-4], gamma[1-4] depending of whether value is diastolic or systolic and subject is male or female
    //j using regression coefficients from the Fourth reference data

    var alpha = 0.0;
    var beta = [];
    var gamma = [];
    var y = decimal_age;
    var mu = 0.0; //expected bp for age, sex and height
    var sigma = 0.0; //standard deviation

    if (isSystolic) {
      if (isMale) {
        alpha = 102.19768;
        beta[1] = 1.82416;
        beta[2] = 0.12776;
        beta[3] = 0.00249;
        beta[4] = -0.00135;
        gamma[1] = 2.73157;
        gamma[2] = -0.19618;
        gamma[3] = -0.04659;
        gamma[4] = 0.00947;
        sigma = 10.7128;
      } else {
        alpha = 102.01027;
        beta[1] = 1.94397;
        beta[2] = 0.00598;
        beta[3] = -0.00789;
        beta[4] = -0.00059;
        gamma[1] = 2.03526;
        gamma[2] = 0.02534;
        gamma[3] = -0.01884;
        gamma[4] = 0.00121;
        sigma = 10.4855;
      }
    } else { //these are diastolic values
      if (isMale) {
        alpha = 61.01217;
        beta[1] = 0.68314;
        beta[2] = -0.09835;
        beta[3] = 0.01711;
        beta[4] = 0.00045;
        gamma[1] = 1.46993;
        gamma[2] = -0.07849;
        gamma[3] = -0.03144;
        gamma[4] = 0.00967;
        sigma = 11.6032;
      } else {
        alpha = 60.50510;
        beta[1] = 1.01301;
        beta[2] = 0.01157;
        beta[3] = 0.00424;
        beta[4] = -0.00137;
        gamma[1] = 1.16641;
        gamma[2] = 0.12795;
        gamma[3] = -0.03869;
        gamma[4] = -0.00079;
        sigma = 10.9573;
      }
    }

    var betablock = 0.0;
    for (j = 1; j < 5; j++) {
      betablock += (beta[j]* Math.pow((y-10),j));
    }

    var gammablock = 0.0;
    for (k = 1; k < 5; k++) {
     gammablock += (gamma[k] * Math.pow(Zht,k));
    }

    mu = alpha + betablock + gammablock; //this is the expected blood pressure of a child the same age, height and sex

    /// compare actual bp with expected to calculate Z-Score(Zbp) using Zbp = (x – µ)/σ

    var Zbp = (bp_measurement - mu)/ sigma;

    //  convert the bp Z-score to a percentile (P), compute P = Φ (Zbp) x 100%
    //  where Φ (Z) = area under a standard normal distribution to the left of Z.

  //  var P = convertZScoreToCentile(Zbp);

  return Zbp; //here we are returning the bp z score
}


////////////// these are all the private methods to remain unexposed

function SDS(measurement,  decimalAge,  actualMeasurement, isMale){
     z = 0.0;

     lArray = getMeasurementParameter(measurement, isMale, "L");
     mArray = getMeasurementParameter(measurement, isMale, "M");
     sArray = getMeasurementParameter(measurement, isMale, "S");

     var l, m, s = 0.0;

    ageMatched = thereIsADecimalAgeMatch(decimalAge);

    if (ageMatched){
        ageIndex = indexForMatchedDecimalAge(decimalAge);
        l = getMatchedLMorSParameter(lArray,ageIndex);
        m = getMatchedLMorSParameter(mArray,ageIndex);
        s = getMatchedLMorSParameter(sArray,ageIndex);
    }
    else{
        oneBelow = findAgeIndexOneBelow(decimalAge);
        if (canUseCubicInterpolation(oneBelow)){
            l = cubicInterpolation(actualMeasurement, decimalAge, oneBelow, lArray, decimalAges);
            m = cubicInterpolation(actualMeasurement, decimalAge, oneBelow, mArray, decimalAges);
            s = cubicInterpolation(actualMeasurement, decimalAge, oneBelow, sArray, decimalAges);
        }
        else {
            l = linearInterpolation(actualMeasurement, decimalAge, oneBelow, lArray, decimalAges);
            m = linearInterpolation(actualMeasurement, decimalAge, oneBelow, mArray, decimalAges);
            s = linearInterpolation(actualMeasurement, decimalAge, oneBelow, sArray, decimalAges);
        }
    }

    z = calculateSDS(l, m, s, actualMeasurement);

    return z;
}

function convertZScoreToCentile( z){
     var centile=0.0;

    //z == number of standard deviations from the mean

    //if z is greater than 6.5 standard deviations from the mean
    //the number of significant digits will be outside of a reasonable
    //range
    if ( z < -6.5)
        return 0.0;
    if( z > 6.5)
        return 1.0;

    var factK = 1;
    var sum = 0.0;
    var term = 1.0;
    k = 0;
    var loopStop = Math.exp(-23);

        while (Math.abs(term) > loopStop) {
            term = .3989422804 * Math.pow(-1, k) * Math.pow(z, k) / (2 * k + 1) / Math.pow(2, k) * Math.pow(z, k + 1) / factK;
            sum += term;
            k++;
            factK *= k;

        }

    sum += 0.5;

    if(isNaN(sum)){
        sum = 0.0;
    }

    centile = sum * 100.0;

    return centile;
}

function getMeasurementParameter(measurement, male, parameter){
    var arrayToReturn = [0];
    if (measurement=="weight"){
        if (male){
            if (parameter=="L"){
                arrayToReturn = boysWeightL;
            }
            if (parameter=="M"){
                arrayToReturn = boysWeightM;
            }
            if (parameter=="S"){
                arrayToReturn = boysWeightS;
            }
        }else{
            if (parameter=="L"){
                arrayToReturn = girlsWeightL;
            }
            if (parameter=="M"){
                arrayToReturn = girlsWeightM;
            }
            if (parameter=="S"){
                arrayToReturn = girlsWeightS;
            }
        }
    }
    else if(measurement=="height"){
        if (male){
            if (parameter=="L"){
                arrayToReturn = boysHeightL;
            }
            if (parameter=="M"){
                arrayToReturn = boysHeightM;
            }
            if (parameter=="S"){
                arrayToReturn = boysHeightS;
            }
        }else{
            if (parameter=="L"){
                arrayToReturn = girlsHeightL;
            }
            if (parameter=="M"){
                arrayToReturn = girlsHeightM;
            }
            if (parameter=="S"){
                arrayToReturn = girlsHeightS;
            }
        }
    }
    else if(measurement=="BMI"){
        if (male){
            if (parameter=="L"){
                arrayToReturn = boysBMIL;
            }
            if (parameter=="M"){
                arrayToReturn = boysBMIM;
            }
            if (parameter=="S"){
                arrayToReturn = boysBMIS;
            }
        }
        else {
            if (parameter=="L") {
                arrayToReturn = girlsBMIL;
            }
            if (parameter=="M") {
                arrayToReturn = girlsBMIM;
            }
            if (parameter=="S") {
                arrayToReturn = girlsBMIS;
            }
        }
    }
    else if(measurement=="BPSystolic"){
        if (male){
            if (parameter=="L"){
                arrayToReturn = boysBPSystolicL;
            }
            if (parameter=="M"){
                arrayToReturn = boysBPSystolicM;
            }
            if (parameter=="S"){
                arrayToReturn = boysBPSystolicS;
            }
        }
        else {
            if (parameter=="L") {
                arrayToReturn = girlsBPSystolicL;
            }
            if (parameter=="M") {
                arrayToReturn = girlsBPSystolicM;
            }
            if (parameter=="S") {
                arrayToReturn = girlsBPSystolicS;
            }
        }
    }
    else if(measurement=="BPDiastolic"){
        if (male){
            if (parameter=="L"){
                arrayToReturn = boysBPDiastolicL;
            }
            if (parameter=="M"){
                arrayToReturn = boysBPDiastolicM;
            }
            if (parameter=="S"){
                arrayToReturn = boysBPDiastolicS;
            }
        }
        else {
            if (parameter=="L") {
                arrayToReturn = girlsBPDiastolicL;
            }
            if (parameter=="M") {
                arrayToReturn = girlsBPDiastolicM;
            }
            if (parameter=="S") {
                arrayToReturn = girlsBPDiastolicS;
            }
        }
    }
    return arrayToReturn;
}

function getMatchedLMorSParameter( measurementArray, mDecimalAgeIndex){
     l = 0.0;
    l = measurementArray[mDecimalAgeIndex];
    return l;
}

function getInterpolatedLMorSParameter( measuredValue,  decimalAge, measurement, lowerAgeIndex,  canCubicInterpolate, decimalAgeArrayToUse){
    var interpolatedParameter = 0.0;
    if (canCubicInterpolate){
        interpolatedParameter = cubicInterpolation(measuredValue, decimalAge, lowerAgeIndex, measurement, decimalAgeArrayToUse);
    }
    else {
        interpolatedParameter = linearInterpolation(measuredValue, decimalAge, lowerAgeIndex, measurement, decimalAgeArrayToUse);
    }

    return interpolatedParameter;
}


function indexForMatchedDecimalAge( mDecimalAge){
    var mIndex = 0;
    if (mDecimalAge==0.0){
        mIndex = 17;
    }
    else if (mDecimalAge==2.0){
        mIndex = 56;
    }
    else if (mDecimalAge==4.0){
        mIndex = 81;
    }
    else if (mDecimalAge==20){
        mIndex = 273;
    }
    else {
        for (i = 0; i < decimalAges.length; i++) {
            var lookUpAge = decimalAges[i];
            if (lookUpAge < mDecimalAge) {
                mIndex = i;
            }
        }
    }
    return mIndex;
}



function thereIsADecimalAgeMatch( mDecimalAge){
    var matchFound = false;
        for (i=0; i<decimalAges.length; i++){
             var lookUpAge = decimalAges[i];
            if (lookUpAge == mDecimalAge){
                matchFound = true; //note that a match may occur more than once if age = 2 or 4 yrs
                break;
            }
        }
    return matchFound;
}

function findAgeIndexOneBelow( decimalAge){
    var index = 0;
    for (i=0; i<decimalAges.length; i++){
         lookUpAge = decimalAges[i];
        if (lookUpAge < decimalAge){
            index = i;
        }
    }
    return index;
}

function canUseCubicInterpolation(ageIndexBelow){
    var canUseCubicInterpolation = true;
    if (ageIndexBelow == 17 || ageIndexBelow == 54 || ageIndexBelow == 55 || ageIndexBelow == 56 || ageIndexBelow == 80 || ageIndexBelow == 81 || ageIndexBelow == 272){
        //this is age 0 (17) or lower age just under 2 (54) or lower age 2 (55) or upper age 2 (56) or lower 4(80) or upper 4 (81) or 20 (273)
        canUseCubicInterpolation = false;
        return canUseCubicInterpolation;
    }
    return canUseCubicInterpolation = true;
}

function canUseCubicInterpolationForBP(ageIndexBelow){
  var canUseCubicInterpolation;
  if (ageIndexBelow == 0 || ageIndexBelow == 39) {
    return canUseCubicInterpolation = false;
  } else {
    return canUseCubicInterpolation = true;
  }

}

function linearInterpolation( measuredValue,  decimalAge, ageIndexBelow, measurementArrayToUse, decimalAgeArrayToUse){
     var linearInterpolatedValue = 0.0;

     var valueBelow = measurementArrayToUse[ageIndexBelow];
     var valueAbove = measurementArrayToUse[ageIndexBelow+1];
     var ageBelow = decimalAgeArrayToUse[ageIndexBelow];
     var ageAbove = decimalAgeArrayToUse[ageIndexBelow+1];

    linearInterpolatedValue = valueBelow + (((decimalAge - ageBelow)*valueAbove-valueBelow))/(ageAbove-ageBelow);


    return linearInterpolatedValue;
}

function cubicInterpolation( measuredValue,  decimalAge, ageIndexBelow, measurementArrayToUse, decimalAgeArrayToUse){
     var cubicInterpolatedValue = 0.0;

     var t = 0.0; //actual age
     var tt0 = 0.0;
     var tt1 = 0.0;
     var tt2 = 0.0;
     var tt3 = 0.0;

     var t01 = 0.0;
     var t02 = 0.0;
     var t03 = 0.0;
     var t12 = 0.0;
     var t13 = 0.0;
     var t23 = 0.0;

     var ageTwoBelow = decimalAgeArrayToUse[ageIndexBelow-1];
     var ageOneBelow = decimalAgeArrayToUse[ageIndexBelow];
     var ageOneAbove = decimalAgeArrayToUse[ageIndexBelow+1];
     var ageTwoAbove = decimalAgeArrayToUse[ageIndexBelow+2];

     var measurementTwoBelow = measurementArrayToUse[ageIndexBelow-1];
     var measurementOneBelow = measurementArrayToUse[ageIndexBelow];
     var measurementOneAbove = measurementArrayToUse[ageIndexBelow+1];
     var measurementTwoAbove = measurementArrayToUse[ageIndexBelow+2];

    t = decimalAge;


    tt0 = decimalAge - ageTwoBelow;
    tt1 = decimalAge - ageOneBelow;
    tt2 = decimalAge - ageOneAbove;
    tt3 = decimalAge - ageTwoAbove;

    t01 = ageTwoBelow - ageOneBelow;
    t02 = ageTwoBelow - ageOneAbove;
    t03 = ageTwoBelow - ageTwoAbove;

    t12 = ageOneBelow - ageOneAbove;
    t13 = ageOneBelow - ageTwoAbove;
    t23 = ageOneAbove - ageTwoAbove;

    cubicInterpolatedValue = measurementTwoBelow * tt1 * tt2 * tt3 /t01 / t02 / t03 - measurementOneBelow * tt0 * tt2 * tt3 / t01 / t12 /t13 + measurementOneAbove * tt0 * tt1 * tt3 / t02/ t12 / t23 - measurementTwoAbove * tt0 * tt1 * tt2 / t03 / t13 / t23;

    return cubicInterpolatedValue;
}

function calculateSDS( myL,  myM,  myS,  myMeasurement){
    var SDS = 0.0;

    if (myL != 0.0){
        SDS = (((Math.pow((myMeasurement / myM), myL))-1)/(myL*myS));
    }

    else {
        SDS = (Math.log(myMeasurement / myM)/myS);
    }

    return SDS;
}

function getLMS( measurement,  isMale,  actualMeasurement,  decimalAge, decimalAgeArrayToUse){

     var lArray = getMeasurementParameter(measurement, isMale, "L");
     var mArray = getMeasurementParameter(measurement, isMale, "M");
     var sArray = getMeasurementParameter(measurement, isMale, "S");

     var l, m, s = 0.0;

    var ageMatched = thereIsADecimalAgeMatch(decimalAge);

    if (ageMatched){
        ageIndex = indexForMatchedDecimalAge(decimalAge);
        l = getMatchedLMorSParameter(lArray,ageIndex);
        m = getMatchedLMorSParameter(mArray,ageIndex);
        s = getMatchedLMorSParameter(sArray,ageIndex);
    }
    else{
        var oneBelow = findAgeIndexOneBelow(decimalAge);
        if (canUseCubicInterpolation(oneBelow)){
            l = cubicInterpolation(actualMeasurement, decimalAge, oneBelow, lArray, decimalAgeArrayToUse);
            m = cubicInterpolation(actualMeasurement, decimalAge, oneBelow, mArray, decimalAgeArrayToUse);
            s = cubicInterpolation(actualMeasurement, decimalAge, oneBelow, sArray, decimalAgeArrayToUse);
        }
        else {
            l = linearInterpolation(actualMeasurement, decimalAge, oneBelow, lArray, decimalAgeArrayToUse);
            m = linearInterpolation(actualMeasurement, decimalAge, oneBelow, mArray, decimalAgeArrayToUse);
            s = linearInterpolation(actualMeasurement, decimalAge, oneBelow, sArray, decimalAgeArrayToUse);
        }
    }

     var lms = [l,m,s];

    return lms;
}

/// these are the bp methods

function findBPDecimalAge(mDecimalAge){
    var exactMatch = false;
      for (i=0; i<bp_decimalAges.length; i++){
           var lookUpAge = bp_decimalAges[i];
          if (lookUpAge == mDecimalAge){
              exactMatch = true;
          }
      }
  return exactMatch;
}

function findBPDecimalAgeIndexOneBelow( decimalAge){
    var index = 0;
    for (i=0; i<bp_decimalAges.length; i++){
         lookUpAge = bp_decimalAges[i];
        if (lookUpAge < decimalAge){
            index = i;
        }
    }
    return index;
}

function indexForMatchedBPDecimalAge( mDecimalAge){
    var mIndex = 0;
    if (mDecimalAge==4.0){
        mIndex = 0;
    }
    else if (mDecimalAge==24){
        mIndex = 40;
    }
    else {
        for (i = 0; i < bp_decimalAges.length; i++) {
            var lookUpAge = bp_decimalAges[i];
            if (lookUpAge < mDecimalAge) {
                mIndex = i;
            }
        }
    }
    return mIndex;
}
